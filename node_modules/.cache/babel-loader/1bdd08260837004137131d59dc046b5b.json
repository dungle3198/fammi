{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid'; // For version 4\n\nvar AWS = require(\"aws-sdk\");\n\nlet awsConfig = {\n  \"region\": \"ap-southeast-1\",\n  \"endpoint\": \"dynamodb.ap-southeast-1.amazonaws.com\",\n  \"accessKeyId\": \"AKIA2MHOP7MJ4LBAR27C\",\n  \"secretAccessKey\": \"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\"\n};\nAWS.config.update(awsConfig);\nvar todolist_list = [];\nlet docClient = new AWS.DynamoDB.DocumentClient(); //This function is to getting all the items in a table in Dynamo\n\nconst data = () => {\n  var params = {\n    TableName: \"todolist\"\n  };\n\n  function onScan(err, data) {\n    if (err) {\n      console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {\n      //console.log(\"Scan succeeded.\");\n      todolist_list = JSON.parse(JSON.stringify(data.Items));\n    }\n  }\n\n  const GetUsers = async function () {\n    await docClient.scan(params, onScan);\n  };\n\n  GetUsers();\n  return todolist_list;\n};\n\ndata(); //this function is to add an item in a table in Dynamo\n\nconst createTodolist = async function (title, elements, family_key, user) {\n  var input = {\n    \"todolist_id\": uuidv4(),\n    \"title\": title,\n    \"elements\": elements,\n    \"family_key\": family_key,\n    \"user\": user,\n    \"status\": \"Created\",\n    \"time\": Date.now()\n  };\n  var params = {\n    TableName: \"todolist\",\n    Item: input\n  };\n  console.log(input);\n  docClient.put(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {// console.log(\"users::save::success\");\n    }\n  });\n}; //this function is to get an item by id in a table in Dynamo\n\n\nconst readTodolist = async function (todolist_id) {\n  var params = {\n    TableName: \"todolist\",\n    Key: {\n      \"todolist_id\": todolist_id\n    }\n  };\n  docClient.get(params, function (err, data) {\n    if (err) {\n      console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2));\n    } else {// console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2));\n    }\n\n    return JSON.parse(JSON.stringify(data));\n  });\n}; //this function is to update an item in a table in Dynamo\n\n\nconst updateToDoList_Title = async function (todolist_id, title) {\n  var params = {\n    TableName: \"todolist\",\n    Key: {\n      \"todolist_id\": todolist_id\n    },\n    UpdateExpression: \"set title = :title\",\n    ExpressionAttributeValues: {\n      \":title\": title\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - Title\" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst updateToDoList_Status = async function (todolist_id) {\n  var params = {\n    TableName: \"todolist\",\n    Key: {\n      \"todolist_id\": todolist_id\n    },\n    UpdateExpression: \"set status = :status\",\n    ExpressionAttributeValues: {\n      \":status\": \"Edited\"\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - Status\" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst updateToDoList_Time = async function (todolist_id) {\n  var params = {\n    TableName: \"todolist\",\n    Key: {\n      \"todolist_id\": todolist_id\n    },\n    UpdateExpression: \"set #time = :time\",\n    ExpressionAttributeValues: {\n      \":time\": Date.now()\n    },\n    ExpressionAttributeNames: {\n      '#time': 'time'\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - Time\" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst updateToDoList_Elements = async function (todolist_id, elements) {\n  var params = {\n    TableName: \"todolist\",\n    Key: {\n      \"todolist_id\": todolist_id\n    },\n    UpdateExpression: \"set elements = :elements\",\n    ExpressionAttributeValues: {\n      \":elements\": elements\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - Elements\" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst deleteTodolist = function (todolist_id) {\n  var params = {\n    TableName: \"todolist\",\n    Key: {\n      \"todolist_id\": todolist_id\n    }\n  };\n  docClient.delete(params, function (err, data) {\n    if (err) {//console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {//console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n      }\n  });\n};\n\nexport { docClient, data, createTodolist, readTodolist, updateToDoList_Title, updateToDoList_Elements, updateToDoList_Status, updateToDoList_Time, deleteTodolist, todolist_list };","map":{"version":3,"sources":["/Users/dungle/Desktop/fammi/src/components/Data/todolist.js"],"names":["v4","uuidv4","AWS","require","awsConfig","config","update","todolist_list","docClient","DynamoDB","DocumentClient","data","params","TableName","onScan","err","console","error","JSON","stringify","parse","Items","GetUsers","scan","createTodolist","title","elements","family_key","user","input","Date","now","Item","log","put","readTodolist","todolist_id","Key","get","updateToDoList_Title","UpdateExpression","ExpressionAttributeValues","ReturnValues","updateToDoList_Status","updateToDoList_Time","ExpressionAttributeNames","updateToDoList_Elements","deleteTodolist","delete"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid'; // For version 4\nvar AWS = require(\"aws-sdk\");\n\nlet awsConfig = {\n    \"region\": \"ap-southeast-1\",\n    \"endpoint\": \"dynamodb.ap-southeast-1.amazonaws.com\",\n    \"accessKeyId\": \"AKIA2MHOP7MJ4LBAR27C\",\n    \"secretAccessKey\": \"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\"\n};\nAWS.config.update(awsConfig);\n\nvar todolist_list = [];\nlet docClient = new AWS.DynamoDB.DocumentClient();\n//This function is to getting all the items in a table in Dynamo\nconst data = () => {\n    var params = {\n        TableName: \"todolist\"\n    };\n    function onScan(err, data) {\n\n        if (err) {\n            console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n            //console.log(\"Scan succeeded.\");\n            todolist_list = JSON.parse(JSON.stringify(data.Items))\n        }\n    }\n    const GetUsers = async function () {\n        await docClient.scan(params, onScan);\n    }\n\n    GetUsers();\n    return todolist_list;\n};\ndata();\n//this function is to add an item in a table in Dynamo\nconst createTodolist = async function (title, elements,family_key,user) {\n    var input = {\n        \"todolist_id\": uuidv4(),\n        \"title\": title,\n        \"elements\": elements,\n        \"family_key\":family_key,\n        \"user\":user,\n        \"status\": \"Created\",\n        \"time\":Date.now()\n    };\n    var params = {\n        TableName: \"todolist\",\n        Item: input\n    };\n    console.log(input);\n    docClient.put(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            // console.log(\"users::save::success\");\n        }\n    })\n}\n//this function is to get an item by id in a table in Dynamo\nconst readTodolist = async function (todolist_id) {\n    var params = {\n        TableName: \"todolist\",\n        Key: {\n            \"todolist_id\": todolist_id\n        }\n    };\n    docClient.get(params, function (err, data) {\n        if (err) {\n            console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2));\n        }\n        else {\n            // console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2));\n        }\n        return JSON.parse(JSON.stringify(data));\n    })\n}\n//this function is to update an item in a table in Dynamo\nconst updateToDoList_Title = async function (todolist_id, title) {\n    var params = {\n        TableName: \"todolist\",\n        Key: {\n            \"todolist_id\": todolist_id,\n\n        },\n        UpdateExpression: \"set title = :title\",\n        ExpressionAttributeValues: {\n            \":title\": title,\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - Title\" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst updateToDoList_Status = async function (todolist_id) {\n    var params = {\n        TableName: \"todolist\",\n        Key: {\n            \"todolist_id\": todolist_id,\n\n        },\n        UpdateExpression: \"set status = :status\",\n        ExpressionAttributeValues: {\n            \":status\": \"Edited\",\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - Status\" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst updateToDoList_Time = async function (todolist_id) {\n    var params = {\n        TableName: \"todolist\",\n        Key: {\n            \"todolist_id\": todolist_id,\n\n        },\n        UpdateExpression: \"set #time = :time\",\n        ExpressionAttributeValues: {\n            \":time\": Date.now(),\n        },\n        ExpressionAttributeNames: {\n            '#time': 'time'\n          },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - Time\" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst updateToDoList_Elements = async function (todolist_id, elements) {\n    var params = {\n        TableName: \"todolist\",\n        Key: {\n            \"todolist_id\": todolist_id,\n\n        },\n        UpdateExpression: \"set elements = :elements\",\n        ExpressionAttributeValues: {\n            \":elements\": elements,\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - Elements\" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst deleteTodolist = function (todolist_id) {\n    var params = {\n        TableName: \"todolist\",\n        Key: {\n            \"todolist_id\": todolist_id,\n        }\n    };\n    docClient.delete(params, function (err, data) {\n        if (err) {\n            //console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n            //console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n        }\n    });\n}\nexport {\n    docClient,\n    data,\n    createTodolist,\n    readTodolist,\n    updateToDoList_Title,\n    updateToDoList_Elements,\n    updateToDoList_Status,\n    updateToDoList_Time,\n    deleteTodolist,\n    todolist_list\n}"]},"metadata":{},"sourceType":"module"}
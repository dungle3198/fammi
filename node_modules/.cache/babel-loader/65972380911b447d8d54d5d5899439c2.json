{"ast":null,"code":"var AWS = require(\"aws-sdk\");\n\nlet awsConfig = {\n  \"region\": \"ap-southeast-1\",\n  \"endpoint\": \"dynamodb.ap-southeast-1.amazonaws.com\",\n  \"accessKeyId\": \"AKIA2MHOP7MJ4LBAR27C\",\n  \"secretAccessKey\": \"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\"\n};\nAWS.config.update(awsConfig);\nvar user_list = [];\nlet docClient = new AWS.DynamoDB.DocumentClient(); //This function is to getting all the items in a table in Dynamo\n\nconst data = () => {\n  var params = {\n    TableName: \"users\"\n  };\n\n  function onScan(err, data) {\n    if (err) {\n      console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {\n      //console.log(\"Scan succeeded.\");\n      user_list = JSON.parse(JSON.stringify(data.Items));\n    }\n  }\n\n  const GetUsers = async function () {\n    await docClient.scan(params, onScan);\n  };\n\n  GetUsers();\n  return user_list;\n};\n\ndata(); //this function is to add an item in a table in Dynamo\n\nconst createUser = async function (email, password, key, username, avatar, comet_id) {\n  var input = {\n    \"email\": email,\n    \"password\": password,\n    \"key\": key,\n    \"username\": username,\n    \"avatar\": avatar,\n    \"comet_uid\": comet_id\n  };\n  var params = {\n    TableName: \"users\",\n    Item: input\n  };\n  docClient.put(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n      alert(\"you have successfully signed up\");\n    }\n  });\n}; //this function is to get an item by id in a table in Dynamo\n\n\nconst readUser = async function (email) {\n  var params = {\n    TableName: \"users\",\n    Key: {\n      \"email\": email\n    }\n  };\n  docClient.get(params, function (err, data) {\n    if (err) {\n      console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2));\n    }\n\n    return JSON.parse(JSON.stringify(data));\n  });\n}; //this function is to update an item in a table in Dynamo\n\n\nconst updateUser = async function (email, password) {\n  var params = {\n    TableName: \"users\",\n    Key: {\n      \"email\": email\n    },\n    UpdateExpression: \"set password = :password\",\n    ExpressionAttributeValues: {\n      \":password\": password\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst deleteUser = async function (email) {\n  var params = {\n    TableName: \"users\",\n    Key: {\n      \"email\": email\n    }\n  };\n  docClient.delete(params, function (err, data) {\n    if (err) {//console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {//console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n      }\n  });\n}; //createUser(\"admin\",\"admin\");\n//readUser(\"admin\");\n//updateUser(\"admin\",\"123456\");\n//deleteUser(\"admin\");\n\n\nexport { docClient, createUser, readUser, updateUser, deleteUser, data, user_list };","map":{"version":3,"sources":["/Users/dungle/Desktop/fammi/src/components/Data/user.js"],"names":["AWS","require","awsConfig","config","update","user_list","docClient","DynamoDB","DocumentClient","data","params","TableName","onScan","err","console","error","JSON","stringify","parse","Items","GetUsers","scan","createUser","email","password","key","username","avatar","comet_id","input","Item","put","log","alert","readUser","Key","get","updateUser","UpdateExpression","ExpressionAttributeValues","ReturnValues","deleteUser","delete"],"mappings":"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","sourcesContent":["\nvar AWS = require(\"aws-sdk\");\n\nlet awsConfig = {\n    \"region\": \"ap-southeast-1\",\n    \"endpoint\": \"dynamodb.ap-southeast-1.amazonaws.com\",\n    \"accessKeyId\": \"AKIA2MHOP7MJ4LBAR27C\",\n    \"secretAccessKey\": \"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\"\n};\nAWS.config.update(awsConfig);\n\nvar user_list = [];\nlet docClient = new AWS.DynamoDB.DocumentClient();\n\n//This function is to getting all the items in a table in Dynamo\nconst data = () => {\n    var params = {\n        TableName: \"users\"\n    };\n    function onScan(err, data) {\n\n        if (err) {\n            console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n            //console.log(\"Scan succeeded.\");\n            user_list = JSON.parse(JSON.stringify(data.Items))\n        }\n    }\n    const GetUsers = async function () {\n        await docClient.scan(params, onScan);\n    }\n\n    GetUsers();\n    return user_list;\n};\ndata();\n//this function is to add an item in a table in Dynamo\nconst createUser = async function (email, password, key, username,avatar,comet_id) {\n    var input = {\n        \"email\": email,\n        \"password\": password,\n        \"key\": key,\n        \"username\": username,\n        \"avatar\": avatar,\n        \"comet_uid\": comet_id\n    };\n    var params = {\n        TableName: \"users\",\n        Item: input\n    };\n    docClient.put(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n            alert(\"you have successfully signed up\")\n        }\n    })\n    \n}\n//this function is to get an item by id in a table in Dynamo\nconst readUser = async function (email) {\n    var params = {\n        TableName: \"users\",\n        Key: {\n            \"email\": email\n        }\n    };\n    docClient.get(params, function (err, data) {\n        if (err) {\n            console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2));\n        }\n        else {\n            console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2));\n        }\n        return JSON.parse(JSON.stringify(data));\n    })\n\n}\n\n//this function is to update an item in a table in Dynamo\nconst updateUser = async function (email, password) {\n    var params = {\n        TableName: \"users\",\n        Key: {\n            \"email\": email,\n\n        },\n        UpdateExpression: \"set password = :password\",\n        ExpressionAttributeValues: {\n            \":password\": password,\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\n\nconst deleteUser = async function (email) {\n    var params = {\n        TableName: \"users\",\n        Key: {\n            \"email\": email,\n        }\n    };\n    docClient.delete(params, function (err, data) {\n        if (err) {\n            //console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n            //console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n        }\n    });\n}\n\n\n//createUser(\"admin\",\"admin\");\n//readUser(\"admin\");\n//updateUser(\"admin\",\"123456\");\n//deleteUser(\"admin\");\nexport { docClient,createUser, readUser, updateUser, deleteUser, data, user_list }\n"]},"metadata":{},"sourceType":"module"}
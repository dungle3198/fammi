{"ast":null,"code":"import { CometChat } from \"@cometchat-pro/chat\";\nimport msg from \"./Data/msg\";\nexport default class GroupMessenger {\n  static init() {\n    let cometChatSettings = new CometChat.AppSettingsBuilder().subscribePresenceForAllUsers().setRegion('us').build();\n    return CometChat.init(GroupMessenger.appId, cometChatSettings);\n  }\n\n  static getTextMessage(uid, text, msgType) {\n    if (msgType === \"user\") {\n      return new CometChat.TextMessage(uid, text, CometChat.MESSAGE_TYPE.TEXT, CometChat.RECEIVER_TYPE.USER);\n    } else {\n      return new CometChat.TextMessage(uid, text, CometChat.MESSAGE_TYPE.TEXT, CometChat.RECEIVER_TYPE.GROUP);\n    }\n  }\n\n  static getLoggedinUser() {\n    //console.log(CometChat.getLoggedinUser())\n    return CometChat.getLoggedinUser();\n  }\n\n  static Login(UID) {\n    //console.log(UID);\n    return CometChat.login(UID, 'fae743651e432f171ee21ba834d8af048bd9e841');\n  }\n\n  static getGroupMessages(GUID, callback, limit = 30) {\n    const messagesRequest = new CometChat.MessagesRequestBuilder().setGUID(GUID).setLimit(limit).build();\n    callback();\n    return messagesRequest.fetchPrevious();\n  }\n\n  static sendGroupMessage(UID, message) {\n    const textMessage = this.getTextMessage(UID, message, \"group\");\n    return CometChat.sendMessage(textMessage);\n  }\n\n  static joinGroup(GUID) {\n    return CometChat.joinGroup(GUID, CometChat.GROUP_TYPE.PUBLIC, \"\");\n  }\n\n  static addMessageListener(callback) {\n    CometChat.addMessageListener(this.LISTENER_KEY_MESSAGE, new CometChat.MessageListener({\n      onTextMessageReceived: textMessage => {\n        callback(textMessage);\n      }\n    }));\n  }\n\n}\nGroupMessenger.LISTENER_KEY_MESSAGE = \"msglistener\";\nGroupMessenger.appId = msg.appId;\nGroupMessenger.apiKey = msg.apiKey;\nGroupMessenger.LISTENER_KEY_GROUP = \"grouplistener\";","map":{"version":3,"sources":["/Users/dungle/Desktop/fammi/src/components/Messenger.jsx"],"names":["CometChat","msg","GroupMessenger","init","cometChatSettings","AppSettingsBuilder","subscribePresenceForAllUsers","setRegion","build","appId","getTextMessage","uid","text","msgType","TextMessage","MESSAGE_TYPE","TEXT","RECEIVER_TYPE","USER","GROUP","getLoggedinUser","Login","UID","login","getGroupMessages","GUID","callback","limit","messagesRequest","MessagesRequestBuilder","setGUID","setLimit","fetchPrevious","sendGroupMessage","message","textMessage","sendMessage","joinGroup","GROUP_TYPE","PUBLIC","addMessageListener","LISTENER_KEY_MESSAGE","MessageListener","onTextMessageReceived","apiKey","LISTENER_KEY_GROUP"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,eAAe,MAAMC,cAAN,CAAqB;AAKhC,SAAOC,IAAP,GAAc;AACV,QAAIC,iBAAiB,GAAG,IAAIJ,SAAS,CAACK,kBAAd,GAAmCC,4BAAnC,GAAkEC,SAAlE,CAA4E,IAA5E,EAAkFC,KAAlF,EAAxB;AACA,WAAOR,SAAS,CAACG,IAAV,CAAeD,cAAc,CAACO,KAA9B,EAAoCL,iBAApC,CAAP;AACH;;AACD,SAAOM,cAAP,CAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,OAAjC,EAA0C;AACtC,QAAIA,OAAO,KAAK,MAAhB,EAAwB;AACpB,aAAO,IAAIb,SAAS,CAACc,WAAd,CACHH,GADG,EAEHC,IAFG,EAGHZ,SAAS,CAACe,YAAV,CAAuBC,IAHpB,EAIHhB,SAAS,CAACiB,aAAV,CAAwBC,IAJrB,CAAP;AAMH,KAPD,MAOO;AACH,aAAO,IAAIlB,SAAS,CAACc,WAAd,CACHH,GADG,EAEHC,IAFG,EAGHZ,SAAS,CAACe,YAAV,CAAuBC,IAHpB,EAIHhB,SAAS,CAACiB,aAAV,CAAwBE,KAJrB,CAAP;AAMH;AACJ;;AACD,SAAOC,eAAP,GAAyB;AACrB;AACA,WAAOpB,SAAS,CAACoB,eAAV,EAAP;AACH;;AACD,SAAOC,KAAP,CAAaC,GAAb,EAAkB;AACd;AACA,WAAOtB,SAAS,CAACuB,KAAV,CAAgBD,GAAhB,EAAqB,0CAArB,CAAP;AACH;;AACD,SAAOE,gBAAP,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwCC,KAAK,GAAG,EAAhD,EAAoD;AAChD,UAAMC,eAAe,GAAG,IAAI5B,SAAS,CAAC6B,sBAAd,GACnBC,OADmB,CACXL,IADW,EAEnBM,QAFmB,CAEVJ,KAFU,EAGnBnB,KAHmB,EAAxB;AAIAkB,IAAAA,QAAQ;AACR,WAAOE,eAAe,CAACI,aAAhB,EAAP;AACH;;AACD,SAAOC,gBAAP,CAAwBX,GAAxB,EAA6BY,OAA7B,EAAsC;AAClC,UAAMC,WAAW,GAAG,KAAKzB,cAAL,CAAoBY,GAApB,EAAyBY,OAAzB,EAAkC,OAAlC,CAApB;AACA,WAAOlC,SAAS,CAACoC,WAAV,CAAsBD,WAAtB,CAAP;AACH;;AACD,SAAOE,SAAP,CAAiBZ,IAAjB,EAAuB;AACnB,WAAOzB,SAAS,CAACqC,SAAV,CAAoBZ,IAApB,EAA0BzB,SAAS,CAACsC,UAAV,CAAqBC,MAA/C,EAAuD,EAAvD,CAAP;AACH;;AACD,SAAOC,kBAAP,CAA0Bd,QAA1B,EAAoC;AAChC1B,IAAAA,SAAS,CAACwC,kBAAV,CACI,KAAKC,oBADT,EAEI,IAAIzC,SAAS,CAAC0C,eAAd,CAA8B;AAC1BC,MAAAA,qBAAqB,EAAER,WAAW,IAAI;AAClCT,QAAAA,QAAQ,CAACS,WAAD,CAAR;AACH;AAHyB,KAA9B,CAFJ;AAQH;;AA1D+B;AAAfjC,c,CACVuC,oB,GAAuB,a;AADbvC,c,CAEVO,K,GAAQR,GAAG,CAACQ,K;AAFFP,c,CAGV0C,M,GAAS3C,GAAG,CAAC2C,M;AAHH1C,c,CAIV2C,kB,GAAqB,e","sourcesContent":["import { CometChat } from \"@cometchat-pro/chat\";\nimport msg from \"./Data/msg\"\n\nexport default class GroupMessenger {\n    static LISTENER_KEY_MESSAGE = \"msglistener\";\n    static appId = msg.appId;\n    static apiKey = msg.apiKey;\n    static LISTENER_KEY_GROUP = \"grouplistener\";\n    static init() {\n        let cometChatSettings = new CometChat.AppSettingsBuilder().subscribePresenceForAllUsers().setRegion('us').build();\n        return CometChat.init(GroupMessenger.appId,cometChatSettings);\n    }\n    static getTextMessage(uid, text, msgType) {\n        if (msgType === \"user\") {\n            return new CometChat.TextMessage(\n                uid,\n                text,\n                CometChat.MESSAGE_TYPE.TEXT,\n                CometChat.RECEIVER_TYPE.USER\n            );\n        } else {\n            return new CometChat.TextMessage(\n                uid,\n                text,\n                CometChat.MESSAGE_TYPE.TEXT,\n                CometChat.RECEIVER_TYPE.GROUP\n            );  \n        }\n    }\n    static getLoggedinUser() {\n        //console.log(CometChat.getLoggedinUser())\n        return CometChat.getLoggedinUser();\n    }\n    static Login(UID) {\n        //console.log(UID);\n        return CometChat.login(UID, 'fae743651e432f171ee21ba834d8af048bd9e841');\n    }\n    static getGroupMessages(GUID, callback, limit = 30) {\n        const messagesRequest = new CometChat.MessagesRequestBuilder()\n            .setGUID(GUID)\n            .setLimit(limit)\n            .build();\n        callback();\n        return messagesRequest.fetchPrevious();\n    }\n    static sendGroupMessage(UID, message) {\n        const textMessage = this.getTextMessage(UID, message, \"group\");\n        return CometChat.sendMessage(textMessage);\n    }\n    static joinGroup(GUID) {\n        return CometChat.joinGroup(GUID, CometChat.GROUP_TYPE.PUBLIC, \"\");\n    }\n    static addMessageListener(callback) {\n        CometChat.addMessageListener(\n            this.LISTENER_KEY_MESSAGE,\n            new CometChat.MessageListener({\n                onTextMessageReceived: textMessage => {\n                    callback(textMessage);\n                }\n            })\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}
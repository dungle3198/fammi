{"ast":null,"code":"var _jsxFileName = \"/Users/dungle/Desktop/fammi/src/components/Todolist.jsx\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport 'bootstrap';\nimport { user_list } from './Data/user';\nimport { docClient } from \"./Data/todolist\"; // import { create_todolist_family } from './Data/family';\n\nimport { v4 as uuidv4 } from 'uuid'; // For version 4\n\nimport Checklist from './Checklist'; //import { CodePipeline } from 'aws-sdk';\n\nexport default class Todolist extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todolist_list: [],\n      current_todolist: {},\n      // đây là cái em nên truyền cái fetch data cá nhân mỗi 1 cái todolist\n      title: \"\",\n      elements: [],\n      selected_todolist: {},\n      selected_id: \"\",\n      checklist: {}\n    };\n  }\n\n  clearForm() {\n    this.setState({\n      title: \"\",\n      elements: [],\n      id: \"\",\n      selected_todolist: {},\n      selected_id: \"\"\n    });\n  }\n\n  checkForm() {\n    if (this.state.title === \"\") {\n      alert(\"Title to be filled\");\n      return false;\n    }\n\n    if (this.state.elements.length === 0) {\n      alert(\"List need to have element\");\n      return false;\n    } else {\n      for (var i = 0; i < this.state.elements.length; i++) {\n        if (this.state.elements[i].name.length === 0) {\n          alert(\"Element's name to be filled\");\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  handleCreateForm() {\n    this.clearForm();\n    $('#createList').modal('show');\n  }\n\n  handleAddForm() {\n    let element = {\n      _id: uuidv4(),\n      name: \"\",\n      list_status: false\n    };\n    let list = this.state.elements;\n    list.push(element);\n    this.setState({\n      elements: list\n    });\n  }\n\n  handleRemoveForm(e) {\n    var removed_elements = this.state.elements;\n    removed_elements.splice(e.target.id, 1);\n    this.setState({\n      elements: removed_elements\n    });\n  }\n\n  getTodolist() {\n    var params = {\n      TableName: \"todolist\"\n    };\n    docClient.scan(params, onScan.bind(this));\n\n    function onScan(err, data) {\n      if (err) {\n        console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n      } else {\n        var _list = JSON.parse(JSON.stringify(data.Items));\n\n        _list.sort((a, b) => {\n          return b.time - a.time;\n        });\n\n        var mem = this.state.checklist;\n        this.setState({\n          todolist_list: _list,\n          selected_todolist: mem,\n          checklist: {}\n        });\n        this.state.todolist_list.forEach(e => {\n          console.log(e);\n        }); //docClient.scan(params, onScan.bind(this));\n      }\n    }\n\n    ;\n  }\n\n  handleCreate() {\n    if (this.checkForm() === true) {\n      var input = {\n        \"todolist_id\": uuidv4(),\n        \"title\": this.state.title,\n        \"elements\": this.state.elements,\n        \"family_key\": this.props.user.key,\n        \"user\": this.props.user,\n        \"list_status\": \"Created\",\n        \"time\": Date.now()\n      };\n      var params = {\n        TableName: \"todolist\",\n        Item: input\n      };\n      console.log(input);\n      docClient.put(params, async function (err, data) {\n        if (err) {\n          console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n          console.log(\"users::save::success\" + JSON.stringify(data, null, 2));\n          this.setState({\n            title: \"\",\n            elements: []\n          }); // console.log(\"users::save::success\");\n        }\n\n        this.getTodolist();\n      }.bind(this));\n      $('#createList').modal('hide');\n    }\n  }\n\n  handleDelete() {\n    var confirm_box = window.confirm(\"Do you want to delete the todolist.\");\n\n    if (confirm_box === true) {\n      var params = {\n        TableName: \"todolist\",\n        Key: {\n          \"todolist_id\": this.state.selected_id\n        }\n      };\n      docClient.delete(params, function (err, data) {\n        if (err) {//console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n          //console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n          this.getTodolistbyid(this.state.selected_id);\n        }\n      }); //deleteTodolist(this.state.selected_id)\n\n      $('#editList').modal('hide'); //this.updateTodolistMul()\n    }\n  }\n\n  handleChange(e) {\n    let obj = {};\n    obj[e.target.name] = e.target.value;\n    console.log(this.state.todolist_list);\n    console.log(this.state.current_todolist);\n    this.setState(obj);\n  }\n\n  handleChangeArray(e) {\n    var new_elements = [];\n\n    for (var i = 0; i < this.state.elements.length; i++) {\n      if (i === parseInt(e.target.name)) {\n        let element = {};\n        element[\"name\"] = e.target.value;\n        element[\"list_status\"] = this.state.elements[i].list_status;\n        new_elements.push(element);\n      } else {\n        new_elements.push(this.state.elements[i]);\n      }\n    }\n\n    this.setState({\n      elements: new_elements\n    });\n  }\n\n  async handleCheckArray(e) {\n    var id = e.target.parentElement.parentElement.parentElement.id;\n    var index = e.target.id;\n    this.getElementbyidMul(id);\n    var elements = this.state.current_todolist;\n\n    if (elements[index] !== undefined) {}\n\n    if (elements[index] !== undefined && elements[index].list_status.toString() === e.target.name) {\n      if (elements[index].list_status) {\n        elements[index].list_status = false;\n      } else {\n        elements[index].list_status = true;\n      } //updateToDoList_Elements(id, elements)\n      //this.updateTodolistMul()\n\n    } else {\n      console.log(\"There are some problem. Try again.\");\n    }\n  }\n\n  getElementbyid(id) {\n    var params = {\n      TableName: \"todolist\",\n      Key: {\n        \"todolist_id\": id\n      }\n    };\n    docClient.get(params, function (err, data) {\n      // Đây là khúc nó bắt đầu fetch data \n      if (err) {\n        console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2)); // => This is when the fetching failed\n      } else {\n        // Nếu data lấy về thành công thì nó sẽ trở thành cái object mà e muốn\n        var todolist = data.Item.elements;\n        this.setState({\n          current_todolist: todolist\n        }); // console.log(todolist);\n        // console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2)); ==> This is when the fetching success\n      }\n    }.bind(this));\n  }\n\n  getTodolistbyid(id) {\n    var params = {\n      TableName: \"todolist\",\n      Key: {\n        \"todolist_id\": id\n      }\n    };\n    docClient.get(params, function (err, data) {\n      // Đây là khúc nó bắt đầu fetch data \n      if (err) {\n        console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2)); // => This is when the fetching failed\n      } else {\n        // Nếu data lấy về thành công thì nó sẽ trở thành cái object mà e muốn\n        var todolist = data.Item;\n        this.setState({\n          title: todolist.title,\n          elements: todolist.elements\n        }); // console.log(todolist);\n        // console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2)); ==> This is when the fetching success\n      }\n    }.bind(this));\n  }\n\n  show_Edit_Elements() // Function là để check element vs todolist có bị undefine rồi mới hiển thị\n  {\n    if (this.state.checklist.elements !== undefined) {\n      return React.createElement(React.Fragment, null, this.state.checklist.elements.map((element, index) => {\n        return React.createElement(\"div\", {\n          className: \"row w-100 mx-auto\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          className: \"col-11 form-control mb-2\",\n          id: index,\n          name: element.name,\n          key: index,\n          placeholder: element.name,\n          value: element.name,\n          onChange: this.handleChangeArrayName.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          id: index,\n          name: element.name,\n          value: element.name,\n          onClick: this.removeElement_Edit.bind(this),\n          className: \"CloseBtn close closeEdit col-auto pl-3 pr-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256\n          },\n          __self: this\n        }, \"\\xD7\"));\n      }));\n    }\n  } //#region editfunctionality\n\n\n  select_checklist(checklist) {\n    var new_mem = Object.assign({}, checklist);\n    this.setState({\n      checklist: JSON.parse(JSON.stringify(new_mem)),\n      selected_todolist: checklist\n    });\n  }\n\n  handleChangeArrayName(e) {\n    var new_list = this.state.checklist.elements;\n    new_list.forEach((element, index) => {\n      if (index.toString() === e.target.id) {\n        element.name = e.target.value;\n        return;\n      }\n    });\n    var new_mem = this.state.checklist;\n    new_mem.elements = new_list;\n    this.setState({\n      checklist: new_mem\n    });\n  }\n\n  handleChangeArrayTitle(e) {\n    var new_title = this.state.checklist.title;\n    var new_mem = this.state.checklist;\n\n    if (e.target.name === new_title) {\n      new_title = e.target.value;\n    }\n\n    new_mem.title = new_title;\n    this.setState({\n      checklist: new_mem\n    });\n  }\n\n  updateButton() {\n    var params = {\n      TableName: \"todolist\",\n      Key: {\n        \"todolist_id\": this.state.checklist.todolist_id\n      },\n      UpdateExpression: \"set elements = :elements, title = :title, list_status = :list_status\",\n      ExpressionAttributeValues: {\n        \":elements\": this.state.checklist.elements,\n        \":title\": this.state.checklist.title,\n        \":list_status\": \"Edited\"\n      },\n      ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n      if (err) {\n        console.log(\"users::save::error - Elements\" + JSON.stringify(err, null, 2));\n      } else {\n        // var u = JSON.parse(JSON.stringify(data, null, 2))\n        this.getTodolist();\n        $('#editList').modal('hide'); //console.log(u.title)\n      }\n    }.bind(this));\n  }\n\n  handleEditForm() {\n    let element = {};\n    element[\"name\"] = \"\";\n    element[\"list_status\"] = false;\n    var new_elements = this.state.checklist.elements;\n    new_elements.push(element);\n    var newmem = this.state.checklist;\n    newmem.elements = new_elements;\n    this.setState({\n      checklist: newmem\n    });\n  }\n\n  removeElement_Edit(e) {\n    var new_elements = this.state.checklist.elements;\n    new_elements.splice(e.target.id, 1);\n    var new_mem = this.state.checklist;\n    new_mem.elements = new_elements;\n    this.setState({\n      checklist: new_mem\n    });\n  }\n\n  handleEdit() {\n    // console.log(\"Id\" + this.state.id)\n    // updateToDoList_Title(this.state.selected_id, this.state.title)\n    // updateToDoList_Elements(this.state.selected_id, this.state.elements)\n    // updateToDoList_Time(this.state.selected_id)\n    // updateToDoList_list_status(this.state.selected_id)\n    // this.updateTodolistMul()\n    $('#editList').modal('hide'); //this.getTodolistbyidMul(this.state.selected_id)\n  }\n\n  showSelectedList() {\n    $(\"#editList\").on(\"hide.bs.modal\", function () {}.bind(this));\n\n    if (this.state.checklist.elements !== undefined) {\n      return React.createElement(\"div\", {\n        className: \"modal fade\",\n        id: \"editList\",\n        tabIndex: -1,\n        role: \"dialog\",\n        \"aria-labelledby\": \"exampleModalLabel\",\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-dialog\",\n        role: \"document\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        name: this.state.checklist.title,\n        placeholder: this.state.checklist.title,\n        value: this.state.checklist.title,\n        onChange: this.handleChangeArrayTitle.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"Element\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, this.show_Edit_Elements()), React.createElement(\"li\", {\n        className: \"AddButton list-group-item text-center lead p-0\",\n        onClick: this.handleEditForm.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"btn btn-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, \"Add Element\")), React.createElement(\"p\", {\n        className: \"text-right m-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary mt-2\",\n        onClick: this.updateButton.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, \"Edit\"))))));\n    }\n\n    return;\n  } //#endregion\n\n\n  showElementsCreate() // Function là để check element vs todolist có bị undefine rồi mới hiển thị\n  {\n    if (this.state.elements !== undefined) {\n      return React.createElement(React.Fragment, null, this.state.elements.map((value, index) => {\n        var placeholder = index + 1;\n        return React.createElement(\"div\", {\n          className: \"row w-100 mx-auto\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 386\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          className: \"col form-control mb-2 mr-2\",\n          key: index,\n          name: index,\n          placeholder: \"Element\" + placeholder,\n          onChange: this.handleChangeArray.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 387\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"CloseBtn closeCreate col-auto close\",\n          id: index,\n          onClick: this.handleRemoveForm.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 392\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          id: index,\n          className: \"pr-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 393\n          },\n          __self: this\n        }, \"\\xD7\")));\n      }));\n    }\n  }\n\n  updateTodolist() {// data()\n    // var new_list = []\n    // todolist_list.forEach(element => {\n    //     if (element.family_key === this.props.user.key) {\n    //         new_list.push(element)\n    //     }\n    // })\n    // new_list.sort((a, b) =>\n    //     b.time - a.time\n    // )\n    // this.setState({ todolist_list: new_list })\n  }\n\n  componentDidMount() {\n    this.getTodolist();\n  }\n\n  getAvatar(user_email) {\n    var _u = user_list.find(e => {\n      return e.email === user_email;\n    });\n\n    if (_u !== undefined) {\n      if (_u.avatar !== \"\") {\n        return _u.avatar;\n      }\n    }\n\n    return require('./imgs/ava.jpg');\n  }\n\n  getName(user_email) {\n    var _u = user_list.find(e => {\n      return e.email === user_email;\n    });\n\n    if (_u !== undefined) {\n      return _u.username;\n    }\n\n    return \"Username\";\n  }\n\n  showToDoList() {\n    return React.createElement(React.Fragment, null, this.state.todolist_list.map((list, index) => {\n      if (list.family_key === this.props.user.key) {\n        return React.createElement(Checklist, {\n          key: index,\n          index: index,\n          all_list: this.state.todolist_list,\n          checklist: list,\n          selectChecklist: this.select_checklist.bind(this),\n          getList: this.getTodolist.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 441\n          },\n          __self: this\n        });\n      }\n\n      return null;\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Todolist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Create m-2 mt-4 bg-white p-4 border rounded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: \"List Title\",\n      name: \"title\",\n      value: this.state.title,\n      onChange: this.handleChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      className: \"mt-2 mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"Element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, this.showElementsCreate()), React.createElement(\"li\", {\n      className: \"AddButton list-group-item text-center lead p-0\",\n      onClick: this.handleAddForm.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, \"Add Element\")), React.createElement(\"p\", {\n      className: \"text-right m-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary mt-2\",\n      onClick: this.handleCreate.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"Create\"))), React.createElement(\"div\", {\n      className: \"Display_List\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, this.showToDoList()), React.createElement(\"div\", {\n      className: \"modal fade\",\n      id: \"createList\",\n      tabIndex: -1,\n      role: \"dialog\",\n      \"aria-labelledby\": \"exampleModalLabel\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-dialog\",\n      role: \"document\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    })))), this.showSelectedList());\n  }\n\n}","map":{"version":3,"sources":["/Users/dungle/Desktop/fammi/src/components/Todolist.jsx"],"names":["React","Component","$","user_list","docClient","v4","uuidv4","Checklist","Todolist","constructor","props","state","todolist_list","current_todolist","title","elements","selected_todolist","selected_id","checklist","clearForm","setState","id","checkForm","alert","length","i","name","handleCreateForm","modal","handleAddForm","element","_id","list_status","list","push","handleRemoveForm","e","removed_elements","splice","target","getTodolist","params","TableName","scan","onScan","bind","err","data","console","error","JSON","stringify","_list","parse","Items","sort","a","b","time","mem","forEach","log","handleCreate","input","user","key","Date","now","Item","put","handleDelete","confirm_box","window","confirm","Key","delete","getTodolistbyid","handleChange","obj","value","handleChangeArray","new_elements","parseInt","handleCheckArray","parentElement","index","getElementbyidMul","undefined","toString","getElementbyid","get","todolist","show_Edit_Elements","map","handleChangeArrayName","removeElement_Edit","select_checklist","new_mem","Object","assign","new_list","handleChangeArrayTitle","new_title","updateButton","todolist_id","UpdateExpression","ExpressionAttributeValues","ReturnValues","update","handleEditForm","newmem","handleEdit","showSelectedList","on","showElementsCreate","placeholder","updateTodolist","componentDidMount","getAvatar","user_email","_u","find","email","avatar","require","getName","username","showToDoList","family_key","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport $ from 'jquery';\nimport 'bootstrap';\nimport { user_list } from './Data/user';\nimport { docClient } from \"./Data/todolist\";\n// import { create_todolist_family } from './Data/family';\nimport { v4 as uuidv4 } from 'uuid'; // For version 4\nimport Checklist from './Checklist';\n//import { CodePipeline } from 'aws-sdk';\n\n\nexport default class Todolist extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            todolist_list: [],\n            current_todolist: {}, // đây là cái em nên truyền cái fetch data cá nhân mỗi 1 cái todolist\n            title: \"\",\n            elements: [],\n            selected_todolist: {},\n            selected_id: \"\",\n            checklist: {}\n        }\n\n    }\n    clearForm() {\n        this.setState({\n            title: \"\",\n            elements: [],\n            id: \"\",\n            selected_todolist: {},\n            selected_id: \"\"\n        })\n    }\n    checkForm() {\n        if (this.state.title === \"\") {\n            alert(\"Title to be filled\")\n            return false\n        }\n        if (this.state.elements.length === 0) {\n            alert(\"List need to have element\")\n            return false\n        }\n        else {\n            for (var i = 0; i < this.state.elements.length; i++) {\n                if (this.state.elements[i].name.length === 0) {\n                    alert(\"Element's name to be filled\")\n                    return false\n                }\n            }\n        }\n        return true\n    }\n    handleCreateForm() {\n        this.clearForm()\n        $('#createList').modal('show')\n    }\n    handleAddForm() {\n        let element = {\n            _id: uuidv4(),\n            name: \"\",\n            list_status: false\n        }\n        let list = this.state.elements;\n        list.push(element)\n        this.setState({ elements: list })\n    }\n    handleRemoveForm(e) {\n        var removed_elements = this.state.elements\n        removed_elements.splice(e.target.id, 1)\n        this.setState({ elements: removed_elements })\n    }\n    getTodolist() {\n        var params = {\n            TableName: \"todolist\"\n        };\n        docClient.scan(params, onScan.bind(this));\n        function onScan(err, data) {\n            if (err) {\n                console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n            } else {\n\n\n                var _list = JSON.parse(JSON.stringify(data.Items))\n                _list.sort((a, b) => {\n                    return b.time - a.time;\n                })\n                var mem = this.state.checklist;\n                this.setState({ todolist_list: _list , selected_todolist:mem,checklist:{}});\n                this.state.todolist_list.forEach(e => {\n                    console.log(e);\n                })\n                //docClient.scan(params, onScan.bind(this));\n            }\n        };\n\n    }\n    handleCreate() {\n        if (this.checkForm() === true) {\n            var input = {\n                \"todolist_id\": uuidv4(),\n                \"title\": this.state.title,\n                \"elements\": this.state.elements,\n                \"family_key\": this.props.user.key,\n                \"user\": this.props.user,\n                \"list_status\": \"Created\",\n                \"time\": Date.now()\n            };\n            var params = {\n                TableName: \"todolist\",\n                Item: input\n            };\n            console.log(input);\n            docClient.put(params, async function (err, data) {\n\n                if (err) {\n                    console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n                } else {\n                    console.log(\"users::save::success\" + JSON.stringify(data, null, 2));\n                    this.setState({ title: \"\", elements: [] });\n\n                    // console.log(\"users::save::success\");\n                }\n                this.getTodolist();\n            }.bind(this))\n            $('#createList').modal('hide')\n        }\n    }\n\n    handleDelete() {\n        var confirm_box = window.confirm(\"Do you want to delete the todolist.\");\n        if (confirm_box === true) {\n            var params = {\n                TableName: \"todolist\",\n                Key: {\n                    \"todolist_id\": this.state.selected_id,\n                }\n            };\n            docClient.delete(params, function (err, data) {\n                if (err) {\n                    //console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n                } else {\n                    //console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n                    this.getTodolistbyid(this.state.selected_id);\n                }\n            });\n            //deleteTodolist(this.state.selected_id)\n            $('#editList').modal('hide')\n            //this.updateTodolistMul()\n        }\n    }\n    handleChange(e) {\n        let obj = {};\n        obj[e.target.name] = e.target.value;\n        console.log(this.state.todolist_list);\n        console.log(this.state.current_todolist);\n        this.setState(obj);\n    }\n    handleChangeArray(e) {\n        var new_elements = []\n        for (var i = 0; i < this.state.elements.length; i++) {\n            if (i === parseInt(e.target.name)) {\n                let element = {}\n                element[\"name\"] = e.target.value\n                element[\"list_status\"] = this.state.elements[i].list_status\n                new_elements.push(element)\n            }\n            else {\n                new_elements.push(this.state.elements[i])\n            }\n        }\n        this.setState({ elements: new_elements })\n    }\n    async handleCheckArray(e) {\n        var id = e.target.parentElement.parentElement.parentElement.id\n        var index = e.target.id\n\n        this.getElementbyidMul(id)\n\n        var elements = this.state.current_todolist\n        if (elements[index] !== undefined) {\n        }\n        if (elements[index] !== undefined && elements[index].list_status.toString() === e.target.name) {\n            if (elements[index].list_status) {\n                elements[index].list_status = false\n            }\n            else {\n                elements[index].list_status = true\n            }\n            //updateToDoList_Elements(id, elements)\n            //this.updateTodolistMul()\n        }\n        else {\n            console.log(\"There are some problem. Try again.\")\n        }\n\n    }\n    getElementbyid(id) {\n        var params = {\n            TableName: \"todolist\",\n            Key: {\n                \"todolist_id\": id\n            }\n        };\n        docClient.get(params, function (err, data) { // Đây là khúc nó bắt đầu fetch data \n            if (err) {\n                console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2)); // => This is when the fetching failed\n            }\n            else { // Nếu data lấy về thành công thì nó sẽ trở thành cái object mà e muốn\n                var todolist = data.Item.elements;\n                this.setState({ current_todolist: todolist });\n                // console.log(todolist);\n                // console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2)); ==> This is when the fetching success\n            }\n        }.bind(this))\n    }\n    getTodolistbyid(id) {\n        var params = {\n            TableName: \"todolist\",\n            Key: {\n                \"todolist_id\": id\n            }\n        };\n        docClient.get(params, function (err, data) { // Đây là khúc nó bắt đầu fetch data \n            if (err) {\n                console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2)); // => This is when the fetching failed\n            }\n            else { // Nếu data lấy về thành công thì nó sẽ trở thành cái object mà e muốn\n                var todolist = data.Item;\n                this.setState({\n                    title: todolist.title,\n                    elements: todolist.elements\n                });\n                // console.log(todolist);\n                // console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2)); ==> This is when the fetching success\n            }\n        }.bind(this))\n    }\n\n    show_Edit_Elements() // Function là để check element vs todolist có bị undefine rồi mới hiển thị\n    {\n        if (this.state.checklist.elements !== undefined) {\n            return (<>\n                {\n                    this.state.checklist.elements.map((element, index) => {\n                        return <div className=\"row w-100 mx-auto\" key={index}>\n                            <input type=\"text\" className=\"col-11 form-control mb-2\"\n                                id={index}\n                                name={element.name}\n                                key={index}\n                                placeholder={element.name}\n                                value={element.name}\n                                onChange={this.handleChangeArrayName.bind(this)} />\n\n                            <span id={index}\n                                name={element.name}\n                                value={element.name}\n                                onClick={this.removeElement_Edit.bind(this)}\n                                className=\"CloseBtn close closeEdit col-auto pl-3 pr-1\">×</span>\n\n                        </div>\n                    })\n                }\n            </>)\n        }\n    }\n    //#region editfunctionality\n    select_checklist(checklist) { \n        var new_mem = Object.assign({},checklist);\n        this.setState({ checklist:JSON.parse(JSON.stringify(new_mem)) , selected_todolist: checklist})\n    }\n    handleChangeArrayName(e) {\n        var new_list = this.state.checklist.elements;\n        new_list.forEach((element,index) => {\n            if (index.toString() === e.target.id) {\n                \n                element.name = e.target.value;\n                return;\n            }\n        });\n        var new_mem = this.state.checklist;\n        new_mem.elements = new_list;\n        this.setState({ checklist: new_mem })\n    }\n    handleChangeArrayTitle(e) {\n        var new_title = this.state.checklist.title;\n        var new_mem = this.state.checklist;\n        if (e.target.name === new_title) {\n            new_title = e.target.value;\n        }\n        new_mem.title = new_title;\n        this.setState({ checklist: new_mem })\n    }\n    updateButton() {\n        var params = {\n            TableName: \"todolist\",\n            Key: {\n                \"todolist_id\": this.state.checklist.todolist_id,\n\n            },\n            UpdateExpression: \"set elements = :elements, title = :title, list_status = :list_status\",\n            ExpressionAttributeValues: {\n                \":elements\": this.state.checklist.elements,\n                \":title\": this.state.checklist.title,\n                \":list_status\": \"Edited\"\n            },\n            ReturnValues: \"UPDATED_NEW\"\n        };\n        docClient.update(params, function (err, data) {\n\n            if (err) {\n                console.log(\"users::save::error - Elements\" + JSON.stringify(err, null, 2));\n            } else {\n                // var u = JSON.parse(JSON.stringify(data, null, 2))\n                \n                this.getTodolist();\n                $('#editList').modal('hide')\n                //console.log(u.title)\n            }\n        }.bind(this));\n    }\n    handleEditForm() {\n        let element = {}\n        element[\"name\"] = \"\"\n        element[\"list_status\"] = false\n        var new_elements = this.state.checklist.elements;\n        new_elements.push(element)\n        var newmem = this.state.checklist;\n        newmem.elements = new_elements;\n        this.setState({ checklist: newmem })\n    }\n    removeElement_Edit(e) {\n        var new_elements = this.state.checklist.elements;\n        new_elements.splice(e.target.id, 1);\n        var new_mem = this.state.checklist;\n        new_mem.elements = new_elements;\n        this.setState({ checklist: new_mem });\n    }\n    handleEdit() {\n        // console.log(\"Id\" + this.state.id)\n        // updateToDoList_Title(this.state.selected_id, this.state.title)\n        // updateToDoList_Elements(this.state.selected_id, this.state.elements)\n        // updateToDoList_Time(this.state.selected_id)\n        // updateToDoList_list_status(this.state.selected_id)\n        // this.updateTodolistMul()\n        $('#editList').modal('hide')\n        //this.getTodolistbyidMul(this.state.selected_id)\n    }\n    showSelectedList() {\n        $(\"#editList\").on(\"hide.bs.modal\", function () {\n            \n        }.bind(this));\n        if (this.state.checklist.elements !== undefined) {\n            return <div className=\"modal fade\" id=\"editList\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-body\">\n                            <input type=\"text\" className=\"form-control\" name={this.state.checklist.title}\n                                placeholder={this.state.checklist.title}\n                                value={this.state.checklist.title}\n                                onChange={this.handleChangeArrayTitle.bind(this)} />\n                            <hr />\n                            <div className=\"Element\">\n                                {this.show_Edit_Elements()}\n                            </div>\n                            <li className=\"AddButton list-group-item text-center lead p-0\" onClick={this.handleEditForm.bind(this)}><span className=\"btn btn-success\">Add Element</span></li>\n                            <p className=\"text-right m-0\">\n                                <button type=\"button\" className=\"btn btn-primary mt-2\" onClick={this.updateButton.bind(this)}>Edit</button>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        }\n        return\n    }\n    //#endregion\n    showElementsCreate() // Function là để check element vs todolist có bị undefine rồi mới hiển thị\n    {\n        if (this.state.elements !== undefined) {\n            return (<>\n                {\n                    this.state.elements.map((value, index) => {\n                        var placeholder = index + 1\n                        return <div className=\"row w-100 mx-auto\" key={index}>\n                            <input type=\"text\" className=\"col form-control mb-2 mr-2\"\n                                key={index}\n                                name={index}\n                                placeholder={\"Element\" + placeholder}\n                                onChange={this.handleChangeArray.bind(this)} />\n                            <button type=\"button\" className=\"CloseBtn closeCreate col-auto close\" id={index} onClick={this.handleRemoveForm.bind(this)}>\n                                <span id={index} className=\"pr-1\">×</span>\n                            </button>\n                        </div>\n                    })\n                }\n            </>)\n        }\n    }\n\n    updateTodolist() {\n        // data()\n        // var new_list = []\n        // todolist_list.forEach(element => {\n        //     if (element.family_key === this.props.user.key) {\n        //         new_list.push(element)\n        //     }\n        // })\n        // new_list.sort((a, b) =>\n        //     b.time - a.time\n        // )\n        // this.setState({ todolist_list: new_list })\n    }\n\n    componentDidMount() {\n        this.getTodolist();\n    }\n    getAvatar(user_email) {\n        var _u = user_list.find((e) => { return e.email === user_email });\n        if (_u !== undefined) {\n            if(_u.avatar!==\"\")\n            {\n                return _u.avatar;\n            }\n        }\n        return require('./imgs/ava.jpg')\n    }\n    getName(user_email) {\n        var _u = user_list.find((e) => { return e.email === user_email });\n        if (_u !== undefined) {\n            return _u.username\n        }\n        return \"Username\"\n\n    }\n    showToDoList() {\n        return (<>\n            {this.state.todolist_list.map((list, index) => {\n                if (list.family_key === this.props.user.key) {\n                    return <Checklist key={index}\n                        index={index}\n                        all_list={this.state.todolist_list}\n                        checklist={list}\n                        selectChecklist={this.select_checklist.bind(this)}\n                        getList={this.getTodolist.bind(this)} />\n                }\n                return null\n            })}\n        </>)\n    }\n    render() {\n        return (\n            <div className=\"Todolist\">\n                <div className=\"Create m-2 mt-4 bg-white p-4 border rounded\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"List Title\" name=\"title\" value={this.state.title} onChange={this.handleChange.bind(this)} />\n                    <hr className=\"mt-2 mb-2\" />\n                    <div className=\"Element\">\n                        {this.showElementsCreate()}\n                    </div>\n                    <li className=\"AddButton list-group-item text-center lead p-0\" onClick={this.handleAddForm.bind(this)}><span className=\"btn btn-success\">Add Element</span></li>\n                    <p className=\"text-right m-0\">\n                        <button type=\"button\" className=\"btn btn-primary mt-2\" onClick={this.handleCreate.bind(this)}>Create</button>\n                    </p>\n                </div>\n                <div className=\"Display_List\">\n                    {/* Todolist */}\n                    {this.showToDoList()}\n                </div>\n                <div className=\"modal fade\" id=\"createList\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                    <div className=\"modal-dialog\" role=\"document\">\n                        <div className=\"modal-content\">\n                            <div className=\"modal-body\">\n                                {/* <input type=\"text\" className=\"form-control\" placeholder=\"List Title\" name=\"title\" value={this.state.title} onChange={this.handleChange.bind(this)} />\n                                <hr />\n                                <div className=\"Element\">\n                                    {this.showElements()}\n                                </div>\n                                <li className=\"list-group-item text-center lead p-0\" onClick={this.handleAddForm.bind(this)}>+</li>\n                                <p className=\"text-right m-0\">\n                                    <button type=\"button\" className=\"btn btn-primary mt-2\" onClick={this.handleCreate.bind(this)}>Create</button>\n                                </p> */}\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {this.showSelectedList()}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid'; // For version 4\n\nvar AWS = require(\"aws-sdk\");\n\nlet awsConfig = {\n  \"region\": \"ap-southeast-1\",\n  \"endpoint\": \"dynamodb.ap-southeast-1.amazonaws.com\",\n  \"accessKeyId\": \"AKIA2MHOP7MJ4LBAR27C\",\n  \"secretAccessKey\": \"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\"\n};\nAWS.config.update(awsConfig);\nvar post_list = [];\nlet docClient = new AWS.DynamoDB.DocumentClient(); //This function is to getting all the items in a table in Dynamo\n\nconst data = () => {\n  var params = {\n    TableName: \"posts\"\n  };\n\n  function onScan(err, data) {\n    if (err) {// console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {\n      //console.log(\"Scan succeeded.\");\n      post_list = JSON.parse(JSON.stringify(data.Items)); //console.log(post_list)\n    }\n  }\n\n  const GetUsers = async function () {\n    await docClient.scan(params, onScan);\n  };\n\n  GetUsers();\n  return post_list;\n};\n\ndata(); //this function is to add an item in a table in Dynamo\n\nconst createPost = async function (content, family_key, user, img) {\n  var input = {\n    \"post_id\": uuidv4(),\n    \"content\": content,\n    \"img\": img,\n    \"family_key\": family_key,\n    \"user\": user,\n    \"time\": Date.now(),\n    \"edit_time\": \"\"\n  };\n  var params = {\n    TableName: \"posts\",\n    Item: input\n  };\n  docClient.put(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n}; //this function is to get an item by id in a table in Dynamo\n\n\nconst readPost = async function (post_id) {\n  var params = {\n    TableName: \"posts\",\n    Key: {\n      \"post_id\": post_id\n    }\n  };\n  docClient.get(params, function (err, data) {\n    if (err) {\n      console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2));\n    }\n\n    return JSON.parse(JSON.stringify(data));\n  });\n}; //this function is to update an item in a table in Dynamo\n\n\nconst updatePost_Content = async function (post_id, content) {\n  var params = {\n    TableName: \"posts\",\n    Key: {\n      \"post_id\": post_id\n    },\n    UpdateExpression: \"set content = :content, edit_time = :edit_time\",\n    ExpressionAttributeValues: {\n      \":content\": content,\n      \":edit_time\": Date.now()\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst updatePost_Img = async function (post_id, img) {\n  var params = {\n    TableName: \"posts\",\n    Key: {\n      \"post_id\": post_id\n    },\n    UpdateExpression: \"set img = :img\",\n    ExpressionAttributeValues: {\n      \":img\": img\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst updatePost_Time = async function (post_id, time) {\n  var params = {\n    TableName: \"posts\",\n    Key: {\n      \"post_id\": post_id\n    },\n    UpdateExpression: \"set #time = :time\",\n    ExpressionAttributeValues: {\n      \":time\": time\n    },\n    ExpressionAttributeNames: {\n      '#time': 'time'\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst deletePost = async function (post_id) {\n  var params = {\n    TableName: \"posts\",\n    Key: {\n      \"post_id\": post_id\n    }\n  };\n  docClient.delete(params, function (err, data) {\n    if (err) {//console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {//console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n      }\n  });\n};\n\nexport { createPost, readPost, updatePost_Content, updatePost_Img, updatePost_Time, deletePost, data, docClient, post_list };","map":{"version":3,"sources":["/Users/dungle/Desktop/fammi/src/components/Data/post.js"],"names":["v4","uuidv4","AWS","require","awsConfig","config","update","post_list","docClient","DynamoDB","DocumentClient","data","params","TableName","onScan","err","JSON","parse","stringify","Items","GetUsers","scan","createPost","content","family_key","user","img","input","Date","now","Item","put","console","log","readPost","post_id","Key","get","updatePost_Content","UpdateExpression","ExpressionAttributeValues","ReturnValues","updatePost_Img","updatePost_Time","time","ExpressionAttributeNames","deletePost","delete"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid'; // For version 4\nvar AWS = require(\"aws-sdk\");\n\nlet awsConfig = {\n    \"region\": \"ap-southeast-1\",\n    \"endpoint\": \"dynamodb.ap-southeast-1.amazonaws.com\",\n    \"accessKeyId\": \"AKIA2MHOP7MJ4LBAR27C\",\n    \"secretAccessKey\": \"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\"\n};\nAWS.config.update(awsConfig);\n\nvar post_list = [];\nlet docClient = new AWS.DynamoDB.DocumentClient();\n//This function is to getting all the items in a table in Dynamo\nconst data = () => {\n    var params = {\n        TableName: \"posts\"\n    };\n    function onScan(err, data) {\n\n        if (err) {\n           // console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n            //console.log(\"Scan succeeded.\");\n            post_list = JSON.parse(JSON.stringify(data.Items))\n            //console.log(post_list)\n        }\n    }\n    const GetUsers = async function () {\n        await docClient.scan(params, onScan);\n    }\n\n    GetUsers();\n    return post_list;\n};\ndata();\n//this function is to add an item in a table in Dynamo\nconst createPost = async function (content,family_key,user,img) {\n    var input = {\n        \"post_id\":uuidv4(),\n        \"content\": content,\n        \"img\": img,\n        \"family_key\" : family_key,\n        \"user\":user,\n        \"time\":Date.now(),\n        \"edit_time\":\"\"\n    };\n    var params = {\n        TableName: \"posts\",\n        Item: input\n    };\n    docClient.put(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    })\n}\n//this function is to get an item by id in a table in Dynamo\nconst readPost = async function (post_id) {\n    var params = {\n        TableName: \"posts\",\n        Key: {\n            \"post_id\": post_id\n        }\n    };\n    docClient.get(params, function (err, data) {\n        if (err) {\n            console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2));\n        }\n        else {\n            console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2));\n        }\n        return JSON.parse(JSON.stringify(data));\n    })\n}\n//this function is to update an item in a table in Dynamo\nconst updatePost_Content = async function (post_id, content) {\n    var params = {\n        TableName: \"posts\",\n        Key: {\n            \"post_id\": post_id\n\n        },\n        UpdateExpression: \"set content = :content, edit_time = :edit_time\",\n        ExpressionAttributeValues: {\n            \":content\": content,\n            \":edit_time\": Date.now()\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst updatePost_Img = async function (post_id, img) {\n    var params = {\n        TableName: \"posts\",\n        Key: {\n            \"post_id\": post_id,\n\n        },\n        UpdateExpression: \"set img = :img\",\n        ExpressionAttributeValues: {\n            \":img\": img,\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst updatePost_Time = async function (post_id, time) {\n    var params = {\n        TableName: \"posts\",\n        Key: {\n            \"post_id\": post_id,\n\n        },\n        UpdateExpression: \"set #time = :time\",\n        ExpressionAttributeValues: {\n            \":time\": time,\n        },\n        ExpressionAttributeNames: {\n            '#time': 'time'\n          },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst deletePost = async function (post_id) {\n    var params = {\n        TableName: \"posts\",\n        Key: {\n            \"post_id\": post_id,\n        }\n    };\n    docClient.delete(params, function (err, data) {\n        if (err) {\n            //console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n            //console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n        }\n    });\n}\nexport { createPost,\n    readPost,\n    updatePost_Content,\n    updatePost_Img,\n    updatePost_Time,\n    deletePost,\n    data,\n    docClient,\n    post_list}\n"]},"metadata":{},"sourceType":"module"}
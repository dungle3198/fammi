{"ast":null,"code":"var AWS = require(\"aws-sdk\");\n\nlet awsConfig = {\n  \"region\": \"ap-southeast-1\",\n  \"endpoint\": \"dynamodb.ap-southeast-1.amazonaws.com\",\n  \"accessKeyId\": \"AKIA2MHOP7MJ4LBAR27C\",\n  \"secretAccessKey\": \"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\"\n};\nAWS.config.update(awsConfig);\nvar family_list = [];\nlet docClient = new AWS.DynamoDB.DocumentClient(); //This function is to getting all the items in a table in Dynamo\n\nconst getFamily = () => {\n  var params = {\n    TableName: \"family\"\n  };\n\n  function onScan(err, data) {\n    if (err) {\n      console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {\n      //console.log(\"Scan succeeded.\");\n      family_list = JSON.parse(JSON.stringify(data.Items));\n    }\n  }\n\n  const GetUsers = async function () {\n    await docClient.scan(params, onScan);\n  };\n\n  GetUsers();\n  return family_list;\n};\n\ngetFamily(); //this function is to add an item in a table in Dynamo\n\nconst createFamily = async function (family_key, member) {\n  var input = {\n    \"family_key\": family_key,\n    \"members\": member,\n    \"posts\": [],\n    \"events\": [],\n    \"todolists\": []\n  };\n  var params = {\n    TableName: \"family\",\n    Item: input\n  };\n  docClient.put(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n      getFamily();\n    }\n  });\n};\n\nconst joinFamily = async function (family_key, member) {\n  var params = {\n    TableName: \"family\",\n    Key: {\n      \"family_key\": family_key\n    },\n    UpdateExpression: \"set members = :members\",\n    ExpressionAttributeValues: {\n      \":members\": member\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst create_todolist_family = async function (family_key, todolist) {\n  var params = {\n    TableName: \"family\",\n    Key: {\n      \"family_key\": family_key\n    },\n    UpdateExpression: \"set todolists = :todolists\",\n    ExpressionAttributeValues: {\n      \":todolists\": todolist\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst create_post_family = async function (family_key, post) {\n  var params = {\n    TableName: \"family\",\n    Key: {\n      \"family_key\": family_key\n    },\n    UpdateExpression: \"set posts = :posts\",\n    ExpressionAttributeValues: {\n      \":posts\": post\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst create_event_family = async function (family_key, event) {\n  var params = {\n    TableName: \"family\",\n    Key: {\n      \"family_key\": family_key\n    },\n    UpdateExpression: \"set events = :events\",\n    ExpressionAttributeValues: {\n      \":events\": event\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nexport { createFamily, joinFamily, create_todolist_family, create_post_family, create_event_family, family_list, getFamily };","map":{"version":3,"sources":["/Users/dungle/Desktop/fammi/src/components/Data/family.js"],"names":["AWS","require","awsConfig","config","update","family_list","docClient","DynamoDB","DocumentClient","getFamily","params","TableName","onScan","err","data","console","error","JSON","stringify","parse","Items","GetUsers","scan","createFamily","family_key","member","input","Item","put","log","joinFamily","Key","UpdateExpression","ExpressionAttributeValues","ReturnValues","create_todolist_family","todolist","create_post_family","post","create_event_family","event"],"mappings":"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","sourcesContent":["var AWS = require(\"aws-sdk\");\n\nlet awsConfig = {\n    \"region\": \"ap-southeast-1\",\n    \"endpoint\": \"dynamodb.ap-southeast-1.amazonaws.com\",\n    \"accessKeyId\": \"AKIA2MHOP7MJ4LBAR27C\",\n    \"secretAccessKey\": \"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\"\n};\nAWS.config.update(awsConfig);\n\nvar family_list = [];\nlet docClient = new AWS.DynamoDB.DocumentClient();\n\n//This function is to getting all the items in a table in Dynamo\nconst getFamily = () => {\n    var params = {\n        TableName: \"family\"\n    };\n    function onScan(err, data) {\n\n        if (err) {\n            console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n            //console.log(\"Scan succeeded.\");\n            family_list = JSON.parse(JSON.stringify(data.Items))\n        }\n    }\n    const GetUsers = async function () {\n        await docClient.scan(params, onScan);\n    }\n\n    GetUsers();\n    return family_list;\n};\ngetFamily();\n//this function is to add an item in a table in Dynamo\nconst createFamily = async function (family_key,member) {\n    var input = {\n        \"family_key\":family_key,\n        \"members\": member,\n        \"posts\": [],\n        \"events\": [],\n        \"todolists\": []\n    };\n    var params = {\n        TableName: \"family\",\n        Item: input\n    };\n    docClient.put(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n            getFamily()\n        }\n    })\n}\nconst joinFamily = async function(family_key,member)\n{\n    var params = {\n        TableName: \"family\",\n        Key: {\n            \"family_key\": family_key,\n\n        },\n        UpdateExpression: \"set members = :members\",\n        ExpressionAttributeValues: {\n            \":members\": member,\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst create_todolist_family = async function(family_key,todolist)\n{\n    var params = {\n        TableName: \"family\",\n        Key: {\n            \"family_key\": family_key,\n\n        },\n        UpdateExpression: \"set todolists = :todolists\",\n        ExpressionAttributeValues: {\n            \":todolists\": todolist,\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst create_post_family = async function(family_key,post)\n{\n    var params = {\n        TableName: \"family\",\n        Key: {\n            \"family_key\": family_key,\n\n        },\n        UpdateExpression: \"set posts = :posts\",\n        ExpressionAttributeValues: {\n            \":posts\": post,\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst create_event_family = async function(family_key,event)\n{\n    var params = {\n        TableName: \"family\",\n        Key: {\n            \"family_key\": family_key,\n\n        },\n        UpdateExpression: \"set events = :events\",\n        ExpressionAttributeValues: {\n            \":events\": event,\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nexport {createFamily,joinFamily,create_todolist_family,create_post_family,create_event_family,family_list,getFamily};"]},"metadata":{},"sourceType":"module"}
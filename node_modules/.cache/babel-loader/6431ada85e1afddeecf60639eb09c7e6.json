{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid'; // For version 4\n\nvar AWS = require(\"aws-sdk\");\n\nlet awsConfig = {\n  \"region\": \"ap-southeast-1\",\n  \"endpoint\": \"dynamodb.ap-southeast-1.amazonaws.com\",\n  \"accessKeyId\": \"AKIA2MHOP7MJ4LBAR27C\",\n  \"secretAccessKey\": \"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\"\n};\nAWS.config.update(awsConfig);\nvar event_list = [];\nlet docClient = new AWS.DynamoDB.DocumentClient(); //This function is to getting all the items in a table in Dynamo\n\nconst data = () => {\n  var params = {\n    TableName: \"events\"\n  };\n\n  function onScan(err, data) {\n    if (err) {\n      console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {\n      //console.log(\"Scan succeeded.\");\n      event_list = JSON.parse(JSON.stringify(data.Items));\n    }\n  }\n\n  const GetUsers = async function () {\n    await docClient.scan(params, onScan);\n  };\n\n  GetUsers();\n  return event_list;\n};\n\ndata(); //this function is to add an item in a table in Dynamo\n\nconst createEvent = async function (title, description, start, end, family_key) {\n  var input = {\n    \"event_id\": uuidv4(),\n    \"title\": title,\n    \"description\": description,\n    \"start\": start,\n    \"end\": end,\n    \"family_key\": family_key\n  };\n  var params = {\n    TableName: \"events\",\n    Item: input\n  };\n  docClient.put(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n}; //this function is to get an item by id in a table in Dynamo\n\n\nconst readEvent = async function (event_id) {\n  var params = {\n    TableName: \"events\",\n    Key: {\n      \"event_id\": event_id\n    }\n  };\n  docClient.get(params, function (err, data) {\n    if (err) {\n      console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2));\n    }\n\n    return JSON.parse(JSON.stringify(data));\n  });\n}; //this function is to update an item in a table in Dynamo\n\n\nconst updateEvent_Title = async function (event_id, title) {\n  var params = {\n    TableName: \"events\",\n    Key: {\n      \"event_id\": event_id\n    },\n    UpdateExpression: \"set title = :title\",\n    ExpressionAttributeValues: {\n      \":title\": title\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n}; //this function is to update an item in a table in Dynamo\n\n\nconst updateEvent_Description = async function (event_id, description) {\n  var params = {\n    TableName: \"events\",\n    Key: {\n      \"event_id\": event_id\n    },\n    UpdateExpression: \"set description = :description\",\n    ExpressionAttributeValues: {\n      \":description\": description\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst updateEvent_StartDate = async function (event_id, start) {\n  var params = {\n    TableName: \"events\",\n    Key: {\n      \"event_id\": event_id\n    },\n    UpdateExpression: \"set #start = :start\",\n    ExpressionAttributeValues: {\n      \":start\": start\n    },\n    ExpressionAttributeNames: {\n      '#start': 'start'\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst updateEvent_EndDate = async function (event_id, end) {\n  var params = {\n    TableName: \"events\",\n    Key: {\n      \"event_id\": event_id\n    },\n    UpdateExpression: \"set #end = :end\",\n    ExpressionAttributeValues: {\n      \":end\": end\n    },\n    ExpressionAttributeNames: {\n      '#end': 'end'\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  docClient.update(params, function (err, data) {\n    if (err) {\n      console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n    } else {\n      console.log(\"users::save::success\");\n    }\n  });\n};\n\nconst deleteEvent = async function (event_id) {\n  var params = {\n    TableName: \"events\",\n    Key: {\n      \"event_id\": event_id\n    }\n  };\n  docClient.delete(params, function (err, data) {\n    if (err) {//console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n    } else {//console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n      }\n  });\n};\n\nexport { createEvent, readEvent, updateEvent_Title, updateEvent_Description, updateEvent_StartDate, updateEvent_EndDate, deleteEvent, data, event_list };","map":{"version":3,"sources":["/Users/dungle/Desktop/fammi/src/components/Data/event.js"],"names":["v4","uuidv4","AWS","require","awsConfig","config","update","event_list","docClient","DynamoDB","DocumentClient","data","params","TableName","onScan","err","console","error","JSON","stringify","parse","Items","GetUsers","scan","createEvent","title","description","start","end","family_key","input","Item","put","log","readEvent","event_id","Key","get","updateEvent_Title","UpdateExpression","ExpressionAttributeValues","ReturnValues","updateEvent_Description","updateEvent_StartDate","ExpressionAttributeNames","updateEvent_EndDate","deleteEvent","delete"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid'; // For version 4\n\nvar AWS = require(\"aws-sdk\");\n\nlet awsConfig = {\n    \"region\": \"ap-southeast-1\",\n    \"endpoint\": \"dynamodb.ap-southeast-1.amazonaws.com\",\n    \"accessKeyId\": \"AKIA2MHOP7MJ4LBAR27C\",\n    \"secretAccessKey\": \"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\"\n};\nAWS.config.update(awsConfig);\n\nvar event_list = [];\nlet docClient = new AWS.DynamoDB.DocumentClient();\n//This function is to getting all the items in a table in Dynamo\nconst data = () => {\n    var params = {\n        TableName: \"events\"\n    };\n    function onScan(err, data) {\n\n        if (err) {\n            console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n            //console.log(\"Scan succeeded.\");\n            event_list = JSON.parse(JSON.stringify(data.Items))\n        }\n    }\n    const GetUsers = async function () {\n        await docClient.scan(params, onScan);\n    }\n\n    GetUsers();\n    return event_list;\n};\ndata();\n//this function is to add an item in a table in Dynamo\nconst createEvent = async function (title, description, start, end,family_key) {\n    var input = {\n        \"event_id\":uuidv4(),\n        \"title\": title,\n        \"description\": description,\n        \"start\": start,\n        \"end\": end,\n        \"family_key\" : family_key\n    };\n    var params = {\n        TableName: \"events\",\n        Item: input\n    };\n    docClient.put(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            \n            console.log(\"users::save::success\");\n        }\n    })\n}\n//this function is to get an item by id in a table in Dynamo\nconst readEvent = async function (event_id) {\n    var params = {\n        TableName: \"events\",\n        Key: {\n            \"event_id\": event_id\n        }\n    };\n    docClient.get(params, function (err, data) {\n        if (err) {\n            console.log(\"users::fetchOneByKey::error - \" + JSON.stringify(err, null, 2));\n        }\n        else {\n            console.log(\"users::fetchOneByKey::success - \" + JSON.stringify(data, null, 2));\n        }\n        return JSON.parse(JSON.stringify(data));\n    })\n}\n//this function is to update an item in a table in Dynamo\nconst updateEvent_Title = async function (event_id, title) {\n    var params = {\n        TableName: \"events\",\n        Key: {\n            \"event_id\": event_id,\n\n        },\n        UpdateExpression: \"set title = :title\",\n        ExpressionAttributeValues: {\n            \":title\": title,\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\n//this function is to update an item in a table in Dynamo\nconst updateEvent_Description = async function (event_id, description) {\n    var params = {\n        TableName: \"events\",\n        Key: {\n            \"event_id\": event_id,\n\n        },\n        UpdateExpression: \"set description = :description\",\n        ExpressionAttributeValues: {\n            \":description\": description,\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst updateEvent_StartDate = async function (event_id, start) {\n    var params = {\n        TableName: \"events\",\n        Key: {\n            \"event_id\": event_id,\n\n        },\n        UpdateExpression: \"set #start = :start\",\n        ExpressionAttributeValues: {\n            \":start\": start,\n        },\n        ExpressionAttributeNames: {\n            '#start': 'start'\n          },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst updateEvent_EndDate = async function (event_id, end) {\n    var params = {\n        TableName: \"events\",\n        Key: {\n            \"event_id\": event_id,\n\n        },\n        UpdateExpression: \"set #end = :end\",\n        ExpressionAttributeValues: {\n            \":end\": end,\n        },\n        ExpressionAttributeNames: {\n            '#end': 'end'\n          },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n\n        if (err) {\n            console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n        } else {\n            console.log(\"users::save::success\");\n        }\n    });\n}\nconst deleteEvent = async function (event_id) {\n    var params = {\n        TableName: \"events\",\n        Key: {\n            \"event_id\": event_id,\n        }\n    };\n    docClient.delete(params, function (err, data) {\n        if (err) {\n            //console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n            //console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n        }\n    });\n}\nexport { createEvent,\n    readEvent,\n    updateEvent_Title,\n    updateEvent_Description,\n    updateEvent_StartDate,\n    updateEvent_EndDate,\n    deleteEvent,\n    data,\n    event_list}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/dungle/Desktop/fammi/src/components/Comment.jsx\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport { docClient } from './Data/comment';\nimport { v4 as uuidv4 } from 'uuid'; // For version 4\n\nexport default class Comment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comments: [],\n      content: \"\",\n      selected_comment: {\n        comment_id: \"\",\n        content: \"\",\n        post_id: \"\",\n        user: \"\",\n        time: Date.now()\n      },\n      edit_comment: \"\"\n    };\n  }\n\n  handleChange(e) {\n    let obj = {};\n    obj[e.target.name] = e.target.value;\n    this.setState(obj); //console.log(user_list)\n  } //#region for comment section\n\n\n  getComments() {\n    var params = {\n      TableName: \"comment\",\n      FilterExpression: \"#cg = :post_id\",\n      ExpressionAttributeNames: {\n        \"#cg\": \"post_id\"\n      },\n      ExpressionAttributeValues: {\n        \":post_id\": this.props.post_id\n      }\n    };\n    docClient.scan(params, function (err, data) {\n      if (err) {// for the log in server\n        //console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n      } else {\n        var array = data.Items;\n        array.sort((a, b) => {\n          return a.time - b.time;\n        });\n        this.setState({\n          comments: array\n        });\n      }\n    }.bind(this));\n  }\n\n  createComment() {\n    var time = Date.now();\n    var comment_id = uuidv4();\n    var content = this.state.content;\n    var post_id = this.props.post_id;\n    var poster = this.props.poster;\n    var input = {\n      \"comment_id\": comment_id,\n      \"content\": content,\n      \"post_id\": post_id,\n      \"user\": poster,\n      \"time\": time,\n      \"edit_time\": \"\"\n    };\n    var params = {\n      TableName: \"comment\",\n      Item: input\n    };\n    docClient.put(params, function (err, data) {\n      if (err) {\n        console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n      } else {\n        console.log(\"users::save::success\");\n        this.getComments();\n      }\n    }.bind(this));\n    this.setState({\n      content: \"\"\n    }); //this.getCommentsMul()\n    //this.showAllComments()\n  } //#endregion\n\n\n  editable(comment) {\n    if (this.props.poster.email === comment.user.email) {\n      return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \" \"), React.createElement(\"span\", {\n        id: comment.comment_id,\n        \"data-toggle\": \"modal\",\n        \"data-target\": \"#editComment\",\n        onClick: this.handleClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"hover\",\n        id: comment.comment_id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Edit\")), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \" | \")), React.createElement(\"span\", {\n        id: comment.comment_id,\n        onClick: this.deleteFunction.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"hover\",\n        id: comment.comment_id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Delete\")), this.editForm(comment));\n    }\n  }\n\n  editForm(comment) {\n    $(\"#editComment\").on(\"hide.bs.modal\", function () {\n      this.setState({\n        edit_comment: \"\"\n      });\n    }.bind(this));\n    return React.createElement(\"div\", {\n      className: \"modal fade\",\n      id: \"editComment\",\n      tabIndex: -1,\n      role: \"dialog\",\n      \"aria-labelledby\": \"exampleModalLabel\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-dialog\",\n      role: \"document\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: this.state.selected_comment.content,\n      value: this.state.edit_comment,\n      onChange: this.handleChangeEdit_Comment.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-right m-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: comment.comment_id,\n      type: \"button\",\n      className: \"btn btn-primary mt-2\",\n      onClick: this.editButton.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Edit\"))))));\n  }\n\n  deleteFunction(e) {\n    var confirm_box = window.confirm(\"Do you want to delete the comment.\");\n\n    if (confirm_box === true) {\n      var id = e.target.id;\n      var params = {\n        TableName: \"comment\",\n        Key: {\n          \"comment_id\": id\n        }\n      };\n      docClient.delete(params, function (err, data) {\n        if (err) {\n          console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n        } else {\n          this.getComments();\n          console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n        }\n      }.bind(this));\n    }\n  }\n\n  handleClick(e) {\n    //console.log(e.target.id);\n    var select = this.state.comments.find(a => {\n      return a.comment_id === e.target.id;\n    });\n\n    if (select !== undefined) {\n      this.setState({\n        selected_comment: select\n      });\n    }\n  }\n\n  handleChangeContent(e) {\n    var content = e.target.value;\n    var select = this.state.selected_comment;\n    select.content = content;\n    this.setState({\n      selected_comment: select\n    });\n  }\n\n  handleChangeEdit_Comment(e) {\n    var content = e.target.value;\n    this.setState({\n      edit_comment: content\n    });\n  }\n\n  editButton() {\n    var comment = \"\";\n\n    if (this.state.edit_comment !== \"\") {\n      comment = this.state.edit_comment;\n    } else {\n      comment = this.state.selected_comment.content;\n    }\n\n    var params = {\n      TableName: \"comment\",\n      Key: {\n        \"comment_id\": this.state.selected_comment.comment_id\n      },\n      UpdateExpression: \"set content = :content, edit_time = :edit_time\",\n      ExpressionAttributeValues: {\n        \":content\": comment,\n        \":edit_time\": Date.now()\n      },\n      ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n      if (err) {//console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n      } else {\n        //console.log(\"users::save::success\");\n        this.getComments(); //this.props.getpost(this.state.selected_comment.post_id);\n      }\n    }.bind(this));\n    $('#editComment').modal('hide');\n  }\n\n  handleAvatar(user) {\n    var u = this.props.users.find(value => {\n      return value.email === user.email;\n    });\n\n    if (u === undefined) {\n      return require('./imgs/ava.jpg');\n    }\n\n    if (u.avatar !== \"\") {\n      return u.avatar;\n    }\n\n    return require('./imgs/ava.jpg');\n  }\n\n  handleTitle(user) {\n    var u = this.props.users.find(value => {\n      return value.email === user.email;\n    });\n\n    if (u === undefined) {\n      return user.username;\n    }\n\n    return u.username;\n  }\n\n  handleEdit_Time(comment) {\n    if (comment.edit_time !== \"\") {\n      //console.log(\"edited is real\")\n      return \" Edited on \" + new Date(comment.edit_time).toString().substr(16, 5) + \" \" + new Date(comment.edit_time).toString().substr(4, 11);\n    } else {\n      return \" Created on \" + new Date(comment.time).toString().substr(16, 5) + \" \" + new Date(comment.time).toString().substr(4, 11);\n    }\n  }\n\n  handlestring_length(comment, type) {\n    var length_per_row = this.props.length_per_row;\n    var length = comment.content.length;\n\n    if (comment.content.match(/m/g) !== null) {\n      length = length + comment.content.match(/m/g).length;\n    } //console.log(\"There are\" + length+\" chars in this line\");\n\n\n    if (comment.content === \"\") {\n      return 0;\n    }\n\n    if (type === \"row\") {\n      var rows = Math.ceil(length / length_per_row); //console.log(\"there are \" +rows +\" rows\") \n\n      return rows;\n    }\n\n    if (type === \"col\") {\n      if (length < length_per_row) {\n        //console.log(\"low amount\")\n        return length;\n      }\n\n      return length_per_row;\n    }\n\n    return 1;\n  }\n\n  componentDidMount() {\n    this.getComments();\n  }\n\n  showAllComments() {\n    if (this.state.comments !== undefined) {\n      return React.createElement(React.Fragment, null, this.state.comments.map((comment, index) => {\n        return React.createElement(\"div\", {\n          key: index,\n          className: \"comment\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row m-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-auto p-0\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          alt: comment.user.avatar,\n          className: \"border rounded-circle mt-2\",\n          src: this.handleAvatar(comment.user),\n          width: \"40px\",\n          height: \"40px\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"col p-0\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"d-flex\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"line m-0 pl-2 pr-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        }, this.handleTitle(comment.user)))), React.createElement(\"textarea\", {\n          className: \"ml-2 mr-2 content noInput\",\n          rows: this.handlestring_length(comment, \"row\"),\n          cols: this.handlestring_length(comment, \"col\"),\n          value: comment.content,\n          readOnly: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"CommentTime p-0 pl-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292\n          },\n          __self: this\n        }, React.createElement(\"small\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        }, this.handleEdit_Time(comment)), this.editable(comment)))));\n      }));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Comment m-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, this.showAllComments(), React.createElement(\"div\", {\n      className: \"row w-100 m-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"commentbox col m-0 p-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      name: \"content\",\n      id: this.props.post_id,\n      placeholder: \"Comment\",\n      onChange: this.handleChange.bind(this),\n      value: this.state.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-auto p-0 pl-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.createComment.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"Comment\"))));\n  }\n\n}","map":{"version":3,"sources":["/Users/dungle/Desktop/fammi/src/components/Comment.jsx"],"names":["React","Component","$","docClient","v4","uuidv4","Comment","constructor","props","state","comments","content","selected_comment","comment_id","post_id","user","time","Date","now","edit_comment","handleChange","e","obj","target","name","value","setState","getComments","params","TableName","FilterExpression","ExpressionAttributeNames","ExpressionAttributeValues","scan","err","data","array","Items","sort","a","b","bind","createComment","poster","input","Item","put","console","log","JSON","stringify","editable","comment","email","handleClick","deleteFunction","editForm","on","handleChangeEdit_Comment","editButton","confirm_box","window","confirm","id","Key","delete","error","select","find","undefined","handleChangeContent","UpdateExpression","ReturnValues","update","modal","handleAvatar","u","users","require","avatar","handleTitle","username","handleEdit_Time","edit_time","toString","substr","handlestring_length","type","length_per_row","length","match","rows","Math","ceil","componentDidMount","showAllComments","map","index","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport $ from 'jquery';\nimport { docClient } from './Data/comment'\nimport { v4 as uuidv4 } from 'uuid'; // For version 4\nexport default class Comment extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            comments: [],\n            content: \"\",\n            selected_comment: {\n                comment_id: \"\",\n                content: \"\",\n                post_id: \"\",\n                user: \"\",\n                time: Date.now()\n            },\n            edit_comment: \"\"\n\n        }\n    }\n    handleChange(e) {\n        let obj = {};\n        obj[e.target.name] = e.target.value;\n        this.setState(obj);\n        //console.log(user_list)\n    }\n    //#region for comment section\n    getComments() {\n        var params = {\n            TableName: \"comment\",\n            FilterExpression: \"#cg = :post_id\",\n            ExpressionAttributeNames: {\n                \"#cg\": \"post_id\",\n            },\n\n            ExpressionAttributeValues: {\n                \":post_id\": this.props.post_id,\n            }\n        };\n        docClient.scan(params, function (err, data) {\n            if (err) {\n                // for the log in server\n                //console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(err, null, 2));\n            }\n            else {\n\n                var array = data.Items;\n                array.sort((a, b) => {\n                    return a.time - b.time;\n                })\n                this.setState({ comments: array });\n\n            }\n        }.bind(this));\n\n    }\n    createComment() {\n        var time = Date.now();\n        var comment_id = uuidv4();\n        var content = this.state.content;\n        var post_id = this.props.post_id;\n        var poster = this.props.poster;\n        var input = {\n            \"comment_id\": comment_id,\n            \"content\": content,\n            \"post_id\": post_id,\n            \"user\": poster,\n            \"time\": time,\n            \"edit_time\": \"\"\n\n        };\n        var params = {\n            TableName: \"comment\",\n            Item: input\n        };\n        docClient.put(params, function (err, data) {\n\n            if (err) {\n                console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n            } else {\n                console.log(\"users::save::success\");\n                this.getComments();\n            }\n        }.bind(this))\n        this.setState({ content: \"\" })\n        //this.getCommentsMul()\n        //this.showAllComments()\n    }\n    //#endregion\n\n\n\n    editable(comment) {\n        if (this.props.poster.email === comment.user.email) {\n            return <>\n                <span> </span>\n                <span id={comment.comment_id}\n                    data-toggle=\"modal\" data-target=\"#editComment\"\n                    onClick={this.handleClick.bind(this)}><small className=\"hover\" id={comment.comment_id}>Edit</small></span>\n                {/* Chỉnh khúc này nha anh delete nènè */}\n                <span><small> | </small></span>\n                <span id={comment.comment_id}\n                    onClick={this.deleteFunction.bind(this)}><small className=\"hover\" id={comment.comment_id}>Delete</small></span>\n                {this.editForm(comment)}\n            </>\n        }\n    }\n    editForm(comment) {\n        $(\"#editComment\").on(\"hide.bs.modal\", function () {\n            this.setState({ edit_comment: \"\" })\n        }.bind(this))\n        return <div className=\"modal fade\" id=\"editComment\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\" role=\"document\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-body\">\n                        <input type=\"text\" className=\"form-control\"\n                            placeholder={this.state.selected_comment.content}\n                            value={this.state.edit_comment}\n                            onChange={this.handleChangeEdit_Comment.bind(this)}\n                        />\n                        <p className=\"text-right m-0\">\n                            <button id={comment.comment_id}\n                                type=\"button\"\n                                className=\"btn btn-primary mt-2\"\n                                onClick={this.editButton.bind(this)}>Edit</button>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n    deleteFunction(e) {\n        var confirm_box = window.confirm(\"Do you want to delete the comment.\");\n        if (confirm_box === true) {\n            var id = e.target.id;\n            var params = {\n                TableName: \"comment\",\n                Key: {\n                    \"comment_id\": id,\n                }\n            };\n            docClient.delete(params, function (err, data) {\n                if (err) {\n                    console.error(\"Unable to delete item. Error JSON:\", JSON.stringify(err, null, 2));\n                } else {\n                    this.getComments();\n                    console.log(\"DeleteItem succeeded:\", JSON.stringify(data, null, 2));\n                }\n            }.bind(this));\n        }\n\n    }\n    handleClick(e) {\n        //console.log(e.target.id);\n        var select = this.state.comments.find((a) => {\n            return a.comment_id === e.target.id;\n        })\n        if (select !== undefined) {\n            this.setState({ selected_comment: select })\n        }\n    }\n    handleChangeContent(e) {\n        var content = e.target.value;\n        var select = this.state.selected_comment;\n        select.content = content;\n        this.setState({ selected_comment: select });\n    }\n    handleChangeEdit_Comment(e) {\n        var content = e.target.value;\n        this.setState({ edit_comment: content });\n    }\n    editButton() {\n        var comment = \"\"\n        if (this.state.edit_comment !== \"\") {\n            comment = this.state.edit_comment;\n        }\n        else {\n            comment = this.state.selected_comment.content;\n        }\n        var params = {\n            TableName: \"comment\",\n            Key: {\n                \"comment_id\": this.state.selected_comment.comment_id,\n\n            },\n            UpdateExpression: \"set content = :content, edit_time = :edit_time\",\n            ExpressionAttributeValues: {\n                \":content\": comment,\n                \":edit_time\": Date.now()\n            },\n            ReturnValues: \"UPDATED_NEW\"\n        };\n        docClient.update(params, function (err, data) {\n\n            if (err) {\n                //console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n            } else {\n                //console.log(\"users::save::success\");\n\n                this.getComments();\n                //this.props.getpost(this.state.selected_comment.post_id);\n\n            }\n        }.bind(this));\n        $('#editComment').modal('hide')\n    }\n    handleAvatar(user) {\n        var u = this.props.users.find((value) => {\n            return value.email === user.email\n        })\n        if (u === undefined) {\n            return require('./imgs/ava.jpg');\n        }\n        if (u.avatar !== \"\") {\n            return u.avatar;\n        }\n        return require('./imgs/ava.jpg');\n    }\n    handleTitle(user) {\n        var u = this.props.users.find((value) => {\n            return value.email === user.email\n        })\n        if (u === undefined) {\n            return user.username;\n        }\n        return u.username\n\n    }\n    handleEdit_Time(comment) {\n        if (comment.edit_time !== \"\") {\n            //console.log(\"edited is real\")\n            return \" Edited on \" + new Date(comment.edit_time).toString().substr(16, 5) + \" \" + new Date(comment.edit_time).toString().substr(4, 11)\n        }\n        else {\n            return \" Created on \" + new Date(comment.time).toString().substr(16, 5) + \" \" + new Date(comment.time).toString().substr(4, 11)\n        }\n    }\n    handlestring_length(comment, type) {\n        var length_per_row = this.props.length_per_row;\n        var length = comment.content.length;\n        if (comment.content.match(/m/g) !== null) {\n            length = length + comment.content.match(/m/g).length\n        }\n        //console.log(\"There are\" + length+\" chars in this line\");\n        if (comment.content === \"\") {\n            return 0\n        }\n        if (type === \"row\") {\n\n            var rows = Math.ceil(length / length_per_row)\n            //console.log(\"there are \" +rows +\" rows\") \n            return rows\n        }\n        if (type === \"col\") {\n            if (length < length_per_row) {\n                //console.log(\"low amount\")\n                return length;\n            }\n            return length_per_row;\n        }\n        return 1\n    }\n    componentDidMount() {\n        this.getComments()\n    }\n    showAllComments() {\n        if (this.state.comments !== undefined) {\n            return (<>\n                {this.state.comments.map((comment, index) => {\n                    return (\n                        <div key={index} className=\"comment\">\n                            <div className=\"row m-1\">\n                                <div className=\"col-auto p-0\">\n                                    <img alt={comment.user.avatar}\n                                        className=\"border rounded-circle mt-2\"\n                                        src={this.handleAvatar(comment.user)}\n                                        width=\"40px\" height=\"40px\" />\n                                </div>\n                                <div className=\"col p-0\">\n                                    <div className=\"d-flex\">\n                                        <div className=\"line m-0 pl-2 pr-2\">\n                                            <span>{this.handleTitle(comment.user)}</span>\n                                        </div>\n                                    </div>\n                                    <textarea className=\"ml-2 mr-2 content noInput\"\n                                        rows={this.handlestring_length(comment, \"row\")}\n                                        cols={this.handlestring_length(comment, \"col\")}\n                                        value={comment.content} readOnly>\n                                    </textarea>\n                                    <div className=\"CommentTime p-0 pl-2\">\n                                        <small>{this.handleEdit_Time(comment)}</small>{this.editable(comment)}\n                                    </div>\n\n                                </div>\n                            </div>\n\n                        </div>)\n                })}\n            </>)\n        }\n\n    }\n    render() {\n        return (\n            <div className=\"Comment m-2\">\n                {this.showAllComments()}\n                <div className=\"row w-100 m-0\">\n                    <div className=\"commentbox col m-0 p-0\">\n                        <input type=\"text\"\n                            className=\"form-control\"\n                            name=\"content\"\n                            id={this.props.post_id}\n                            placeholder=\"Comment\"\n                            onChange={this.handleChange.bind(this)}\n                            value={this.state.content} />\n\n                    </div>\n                    <div className=\"col-auto p-0 pl-2\">\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.createComment.bind(this)}>Comment</button>\n                    </div>\n                </div>\n\n\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
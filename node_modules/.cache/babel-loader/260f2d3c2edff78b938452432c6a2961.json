{"ast":null,"code":"var _jsxFileName = \"/Users/dungle/Desktop/fammi/src/components/Profile.jsx\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport { ReactS3Client } from \"./Data/s3\";\nimport { docClient } from \"./Data/user\";\n\nvar bcrypt = require(\"bcryptjs\");\n\nexport default class Profile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: this.props.user,\n      email: \"\",\n      password: \"\",\n      new_password: \"\",\n      confirm_password: \"\",\n      key: \"\",\n      username: \"\",\n      avatar: this.props.user.avatar\n    };\n  }\n\n  handleChange(e) {\n    let obj = {};\n    obj[e.target.name] = e.target.value;\n    this.setState(obj);\n  }\n\n  handleAvatar() {\n    if (this.state.avatar !== \"\") {\n      return this.state.avatar;\n    }\n\n    var img = require('./imgs/ava.jpg');\n\n    return img;\n  }\n\n  dispplayImage() {\n    if (this.state.user !== null || this.state.user !== undefined) {\n      return React.createElement(\"img\", {\n        className: \"Avatar border rounded-circle\",\n        src: this.handleAvatar(),\n        alt: \"\",\n        width: \"150px\",\n        height: \"150px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      });\n    }\n  }\n\n  getData(data) {\n    this.setState({\n      avatar: data.location\n    });\n    document.getElementById(\"edit_avatar\");\n  }\n\n  uploadImage() {\n    var path = document.getElementById(\"edit_avatar\").files[0].name; // get the image file name\n\n    var string = path.split('.'); //var filename = string[0]; // get the name without the type\n\n    var extension = string[1];\n\n    if (extension.toLowerCase() !== \"jpg\" && extension.toLowerCase() !== \"png\" && extension.toLowerCase() !== \"jpeg\" && extension.toLowerCase() !== \"svg\") {\n      alert(\"invalid file format\");\n      return;\n    }\n\n    ReactS3Client.uploadFile(document.getElementById(\"edit_avatar\").files[0]) // pload the image up to s3 first\n    .then(data => {\n      this.getData(data);\n    }) //create cometchat user\n    .catch(err => console.error(err));\n  }\n\n  updateButton() {\n    var u_name = this.state.user.username;\n    var password = this.state.user.password;\n\n    if (this.state.username !== \"\") {\n      u_name = this.state.username;\n    }\n\n    if (this.state.password !== \"\") {\n      password = bcrypt.hashSync(this.state.new_password, 10);\n    }\n\n    var params = {\n      TableName: \"users\",\n      Key: {\n        \"email\": this.state.user.email\n      },\n      UpdateExpression: \"set password = :password, username = :username, avatar = :avatar\",\n      ExpressionAttributeValues: {\n        \":password\": password,\n        \":username\": u_name,\n        \":avatar\": this.state.avatar\n      },\n      ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n      if (err) {\n        console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n      } else {\n        console.log(\"users::save::success\");\n        this.props.getUser();\n      }\n    }.bind(this));\n  }\n\n  updateAvatarButton() {\n    var avatar = this.props.user.avatar;\n\n    if (this.state.avatar === \"\") {\n      alert(\"Please upload a new image file\");\n      return;\n    }\n\n    avatar = this.state.avatar;\n    var params = {\n      TableName: \"users\",\n      Key: {\n        \"email\": this.state.user.email\n      },\n      UpdateExpression: \"set  avatar = :avatar\",\n      ExpressionAttributeValues: {\n        \":avatar\": avatar\n      },\n      ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n      if (err) {\n        console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n      } else {\n        console.log(\"users::save::success\");\n        this.props.getUser();\n      }\n    }.bind(this));\n    $('#editAvatar').modal('hide');\n  }\n\n  updateUsernameButton() {\n    var u_name = \"\";\n\n    if (this.state.username === \"\") {\n      alert(\"Please fill in the new username\");\n      return;\n    }\n\n    u_name = this.state.username;\n    var params = {\n      TableName: \"users\",\n      Key: {\n        \"email\": this.state.user.email\n      },\n      UpdateExpression: \"set  username = :username\",\n      ExpressionAttributeValues: {\n        \":username\": u_name\n      },\n      ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n      if (err) {\n        console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n      } else {\n        console.log(\"users::save::success\");\n        this.props.getUser();\n        var _user = this.state.user;\n        _user.username = this.state.username;\n        this.setState({\n          user: _user,\n          username: \"\"\n        }); //this.state.user.username = this.state.username;\n      }\n    }.bind(this));\n    $('#editUserName').modal('hide');\n  }\n\n  updatePasswordButton() {\n    var password = this.state.user.password;\n    console.log(this.state.user);\n    var newpassword = this.state.new_password;\n    var confirm_password = this.state.confirm_password;\n\n    if (!bcrypt.compareSync(this.state.password, password)) {\n      alert(\"The current password is incorrect\");\n      return;\n    }\n\n    if (newpassword === \"\") {\n      alert(\"Please fill in the new password\");\n      return;\n    }\n\n    if (confirm_password === \"\") {\n      alert(\"Please confirm the password\");\n      return;\n    }\n\n    if (confirm_password !== newpassword) {\n      alert(\"Confirmed password does not match.\");\n      return;\n    }\n\n    password = bcrypt.hashSync(this.state.new_password, 10);\n    var params = {\n      TableName: \"users\",\n      Key: {\n        \"email\": this.state.user.email\n      },\n      UpdateExpression: \"set password = :password\",\n      ExpressionAttributeValues: {\n        \":password\": password\n      },\n      ReturnValues: \"UPDATED_NEW\"\n    };\n    docClient.update(params, function (err, data) {\n      if (err) {\n        console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n      } else {\n        console.log(\"users::save::success\");\n        alert(\"You have edited password successfully!\");\n        this.props.getUser();\n        var _user = this.state.user;\n        _user.password = password;\n        this.setState({\n          user: _user,\n          password: \"\",\n          new_password: \"\",\n          confirm_password: \"\"\n        });\n      }\n    }.bind(this));\n    $('#editPass').modal('hide');\n  }\n\n  handleEditAvatar() {\n    $('#editAvatar').modal('show');\n  }\n\n  handleEditUserName() {\n    $('#editUserName').modal('show');\n  }\n\n  handleEditPass() {\n    $('#editPass').modal('show');\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Profile m-2 mt-4 border p-4 bg-white rounded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, this.dispplayImage(), React.createElement(\"p\", {\n      className: \"m-0 mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, this.state.user.username), React.createElement(\"div\", {\n      className: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      className: \"hover\",\n      onClick: this.handleEditAvatar.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"Change Avatar\")))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"Info mx-auto form-group-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Family Key: \", React.createElement(\"span\", {\n      className: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, this.state.user.key)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Username: \", React.createElement(\"span\", {\n      className: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, this.state.user.username), \"  \", React.createElement(\"small\", {\n      className: \"hover\",\n      onClick: this.handleEditUserName.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Edit\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Password: \", React.createElement(\"span\", {\n      className: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"**********\"), \"  \", React.createElement(\"small\", {\n      className: \"hover\",\n      onClick: this.handleEditPass.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Edit\"))), React.createElement(\"div\", {\n      className: \"modal fade\",\n      id: \"editAvatar\",\n      \"aria-labelledby\": \"exampleModalLabel\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-dialog\",\n      role: \"document\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      id: \"edit_avatar\",\n      name: \"avatar\",\n      onChange: this.uploadImage.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-right m-0 mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.updateAvatarButton.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"Submit\")))))), React.createElement(\"div\", {\n      className: \"modal fade\",\n      id: \"editUserName\",\n      role: \"dialog\",\n      \"aria-labelledby\": \"exampleModalLabel\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-dialog\",\n      role: \"document\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      id: \"username\",\n      placeholder: this.state.user.username,\n      name: \"username\",\n      value: this.state.username,\n      onChange: this.handleChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-right m-0 mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.updateUsernameButton.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"Submit\")))))), React.createElement(\"div\", {\n      className: \"modal fade\",\n      id: \"editPass\",\n      role: \"dialog\",\n      \"aria-labelledby\": \"exampleModalLabel\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-dialog\",\n      role: \"document\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"password\",\n      className: \"form-control\",\n      id: \"password\",\n      placeholder: \"Current Password\",\n      name: \"password\",\n      value: this.state.password,\n      onChange: this.handleChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"password\",\n      className: \"form-control mt-2\",\n      id: \"password\",\n      placeholder: \"New Password\",\n      name: \"new_password\",\n      value: this.state.new_password,\n      onChange: this.handleChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"password\",\n      className: \"form-control mt-2\",\n      id: \"password\",\n      placeholder: \"New Password\",\n      name: \"confirm_password\",\n      value: this.state.confirm_password,\n      onChange: this.handleChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text-right m-0 mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.updatePasswordButton.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"Edit\")))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/dungle/Desktop/fammi/src/components/Profile.jsx"],"names":["React","Component","$","ReactS3Client","docClient","bcrypt","require","Profile","constructor","props","state","user","email","password","new_password","confirm_password","key","username","avatar","handleChange","e","obj","target","name","value","setState","handleAvatar","img","dispplayImage","undefined","getData","data","location","document","getElementById","uploadImage","path","files","string","split","extension","toLowerCase","alert","uploadFile","then","catch","err","console","error","updateButton","u_name","hashSync","params","TableName","Key","UpdateExpression","ExpressionAttributeValues","ReturnValues","update","log","JSON","stringify","getUser","bind","updateAvatarButton","modal","updateUsernameButton","_user","updatePasswordButton","newpassword","compareSync","handleEditAvatar","handleEditUserName","handleEditPass","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport $ from 'jquery';\nimport { ReactS3Client } from \"./Data/s3\";\nimport { docClient } from \"./Data/user\";\nvar bcrypt = require(\"bcryptjs\");\n\n\nexport default class Profile extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            user: this.props.user,\n            email: \"\",\n            password: \"\",\n            new_password: \"\",\n            confirm_password: \"\",\n            key: \"\",\n            username: \"\",\n            avatar: this.props.user.avatar\n        }\n\n    }\n    handleChange(e) {\n        let obj = {};\n        obj[e.target.name] = e.target.value;\n        this.setState(obj);\n    }\n    handleAvatar() {\n        if (this.state.avatar !== \"\") {\n            return this.state.avatar;\n        }\n        var img = require('./imgs/ava.jpg')\n        return img\n    }\n    dispplayImage() {\n        if (this.state.user !== null || this.state.user !== undefined) {\n            return (<img className=\"Avatar border rounded-circle\" src={this.handleAvatar()} alt=\"\" width=\"150px\" height=\"150px\" />)\n        }\n    }\n    getData(data) {\n        this.setState({ avatar: data.location })\n        document.getElementById(\"edit_avatar\")\n    }\n    uploadImage() {\n        var path = document.getElementById(\"edit_avatar\").files[0].name; // get the image file name\n        var string = path.split('.');\n        //var filename = string[0]; // get the name without the type\n        var extension = string[1];\n        if (extension.toLowerCase() !== \"jpg\" && extension.toLowerCase() !== \"png\" && extension.toLowerCase() !== \"jpeg\" && extension.toLowerCase() !== \"svg\") {\n            alert(\"invalid file format\");\n            return;\n        }\n\n        ReactS3Client\n            .uploadFile(document.getElementById(\"edit_avatar\").files[0]) // pload the image up to s3 first\n            .then(data => { this.getData(data) })//create cometchat user\n            .catch(err => console.error(err))\n    }\n    updateButton() {\n        var u_name = this.state.user.username;\n        var password = this.state.user.password;\n        if (this.state.username !== \"\") {\n            u_name = this.state.username;\n        }\n        if (this.state.password !== \"\") {\n            password = bcrypt.hashSync(this.state.new_password, 10)\n        }\n        var params = {\n            TableName: \"users\",\n            Key: {\n                \"email\": this.state.user.email,\n            },\n            UpdateExpression: \"set password = :password, username = :username, avatar = :avatar\",\n            ExpressionAttributeValues: {\n                \":password\": password,\n                \":username\": u_name,\n                \":avatar\": this.state.avatar\n            },\n            ReturnValues: \"UPDATED_NEW\"\n        };\n        docClient.update(params, function (err, data) {\n\n            if (err) {\n                console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n            } else {\n                console.log(\"users::save::success\");\n                this.props.getUser();\n            }\n        }.bind(this));\n    }\n    updateAvatarButton() {\n        var avatar = this.props.user.avatar;\n        if (this.state.avatar === \"\") {\n            alert(\"Please upload a new image file\")\n            return\n        }\n        avatar = this.state.avatar;\n        var params = {\n            TableName: \"users\",\n            Key: {\n                \"email\": this.state.user.email,\n            },\n            UpdateExpression: \"set  avatar = :avatar\",\n            ExpressionAttributeValues: {\n                \":avatar\": avatar,\n            },\n            ReturnValues: \"UPDATED_NEW\"\n        };\n        docClient.update(params, function (err, data) {\n\n            if (err) {\n                console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n            } else {\n                console.log(\"users::save::success\");\n                this.props.getUser();\n            }\n        }.bind(this));\n        $('#editAvatar').modal('hide')\n    }\n    updateUsernameButton() {\n        var u_name = \"\"\n        if (this.state.username === \"\") {\n            alert(\"Please fill in the new username\")\n            return\n        }\n        u_name = this.state.username;\n        var params = {\n            TableName: \"users\",\n            Key: {\n                \"email\": this.state.user.email,\n            },\n            UpdateExpression: \"set  username = :username\",\n            ExpressionAttributeValues: {\n                \":username\": u_name,\n            },\n            ReturnValues: \"UPDATED_NEW\"\n        };\n        docClient.update(params, function (err, data) {\n\n            if (err) {\n                console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n            } else {\n                console.log(\"users::save::success\");\n                this.props.getUser();\n                var _user = this.state.user;\n                _user.username = this.state.username\n                this.setState({user:_user,username:\"\"})\n                //this.state.user.username = this.state.username;\n            }\n        }.bind(this));\n        $('#editUserName').modal('hide')\n    }\n    updatePasswordButton() {\n        var password = this.state.user.password;\n        console.log(this.state.user);\n        var newpassword = this.state.new_password;\n        var confirm_password = this.state.confirm_password;\n\n        if (!bcrypt.compareSync(this.state.password, password)) {\n            alert(\"The current password is incorrect\");\n            return\n        }\n        if (newpassword === \"\") {\n            alert(\"Please fill in the new password\");\n            return\n        }\n        if (confirm_password === \"\") {\n            alert(\"Please confirm the password\");\n            return\n        }\n        if (confirm_password !== newpassword) {\n            alert(\"Confirmed password does not match.\")\n            return\n        }\n        password = bcrypt.hashSync(this.state.new_password, 10)\n        var params = {\n            TableName: \"users\",\n            Key: {\n                \"email\": this.state.user.email,\n            },\n            UpdateExpression: \"set password = :password\",\n            ExpressionAttributeValues: {\n                \":password\": password,\n            },\n            ReturnValues: \"UPDATED_NEW\"\n        };\n        docClient.update(params, function (err, data) {\n\n            if (err) {\n                console.log(\"users::save::error - \" + JSON.stringify(err, null, 2));\n            } else {\n                console.log(\"users::save::success\");\n                alert(\"You have edited password successfully!\")\n\n                this.props.getUser();\n                var _user = this.state.user;\n                _user.password = password;\n                \n                this.setState({\n                    user:_user,\n                    password: \"\",\n                    new_password: \"\",\n                    confirm_password: \"\",\n\n                })\n\n            }\n        }.bind(this));\n        $('#editPass').modal('hide')\n    }\n    handleEditAvatar() {\n        $('#editAvatar').modal('show')\n    }\n    handleEditUserName() {\n        $('#editUserName').modal('show')\n    }\n    handleEditPass() {\n        $('#editPass').modal('show')\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <div className=\"Profile m-2 mt-4 border p-4 bg-white rounded\">\n                <div className=\"form-group-section\">\n                    <div className=\"text-center\">\n                        {this.dispplayImage()}\n                        <p className=\"m-0 mt-1\">{this.state.user.username}</p>\n                        <div className=\"Name\">\n                            <small className=\"hover\" onClick={this.handleEditAvatar.bind(this)}>Change Avatar</small>\n                        </div>\n                    </div>\n\n                </div>\n                <br />\n                <div className=\"Info mx-auto form-group-section\">\n                    <p>Family Key: <span className=\"Name\">{this.state.user.key}</span></p>\n                    <p>Username: <span className=\"Name\">{this.state.user.username}</span>  <small className=\"hover\" onClick={this.handleEditUserName.bind(this)}>Edit</small></p>\n                    <p>Password: <span className=\"Name\">**********</span>  <small className=\"hover\" onClick={this.handleEditPass.bind(this)}>Edit</small></p>\n                </div>\n                {/* <div className=\"form-group-section\">\n                        <label htmlFor=\"username\">Username</label>\n                        <input type=\"text\"\n                            className=\"form-control\"\n                            id=\"username\"\n                            placeholder={this.state.user.username}\n                            name=\"username\"\n                            value={this.state.username}\n                            onChange={this.handleChange.bind(this)} />\n                        <br />\n                        <div className=\"w-100 text-center\">\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-primary\"\n                                onClick={this.updateUsernameButton.bind(this)}\n                            >Edit</button>\n                        </div>\n                        <br />\n                    </div> */}\n                {/* <div className=\"form-group-section\">\n                        <h1> PASSWORD</h1>\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\"\n                            className=\"form-control\"\n                            id=\"password\"\n                            placeholder=\"**********\"\n                            name=\"password\"\n                            value={this.state.password}\n                            onChange={this.handleChange.bind(this)} />\n                        <label htmlFor=\"password\">New Password</label>\n                        <input type=\"password\"\n                            className=\"form-control\"\n                            id=\"password\"\n                            placeholder=\"**********\"\n                            name=\"new_password\"\n                            value={this.state.new_password}\n                            onChange={this.handleChange.bind(this)} />\n                        <label htmlFor=\"password\">Confirm Password</label>\n                        <input type=\"password\"\n                            className=\"form-control\"\n                            id=\"password\"\n                            placeholder=\"**********\"\n                            name=\"confirm_password\"\n                            value={this.state.confirm_password}\n                            onChange={this.handleChange.bind(this)} />\n                    </div>  <br />\n                    <div className=\"w-100 text-center\">\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            onClick={this.updatePasswordButton.bind(this)}\n                        >Edit</button>\n                    </div> */}\n                {/* <div className=\"form-group\">\n                        <label htmlFor=\"exampleInputEmail1\">Key</label>\n                        <select className=\"form-control\" id=\"exampleFormControlSelect1\">\n                            <option>Generate new key</option>\n                            <option>Aldready have key</option>\n                        </select>\n                        <input type=\"text\"\n                            className=\"form-control mt-2\"\n                            id=\"exampleInputKey1\"\n                            placeholder={this.state.user.key}\n                            name=\"key\"\n                            value={this.state.key}\n                            onChange={this.handleChange.bind(this)} />\n                    </div> */}\n\n                {/* Modal */}\n                <div className=\"modal fade\" id=\"editAvatar\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                    <div className=\"modal-dialog\" role=\"document\">\n                        <div className=\"modal-content\">\n                            <div className=\"modal-body\">\n                                <input type=\"file\"\n                                    className=\"form-control\"\n                                    id=\"edit_avatar\"\n                                    name=\"avatar\"\n                                    onChange={this.uploadImage.bind(this)}\n                                />\n                                <p className=\"text-right m-0 mt-2\">\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-primary\"\n                                        onClick={this.updateAvatarButton.bind(this)}\n                                    >Submit</button>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"modal fade\" id=\"editUserName\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                    <div className=\"modal-dialog\" role=\"document\">\n                        <div className=\"modal-content\">\n                            <div className=\"modal-body\">\n                                <input type=\"text\"\n                                    className=\"form-control\"\n                                    id=\"username\"\n                                    placeholder={this.state.user.username}\n                                    name=\"username\"\n                                    value={this.state.username}\n                                    onChange={this.handleChange.bind(this)} />\n                                <p className=\"text-right m-0 mt-2\">\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-primary\"\n                                        onClick={this.updateUsernameButton.bind(this)}\n                                    >Submit</button>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"modal fade\" id=\"editPass\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                    <div className=\"modal-dialog\" role=\"document\">\n                        <div className=\"modal-content\">\n                            <div className=\"modal-body\">\n                                <input type=\"password\"\n                                    className=\"form-control\"\n                                    id=\"password\"\n                                    placeholder=\"Current Password\"\n                                    name=\"password\"\n                                    value={this.state.password}\n                                    onChange={this.handleChange.bind(this)} />\n                                <input type=\"password\"\n                                    className=\"form-control mt-2\"\n                                    id=\"password\"\n                                    placeholder=\"New Password\"\n                                    name=\"new_password\"\n                                    value={this.state.new_password}\n                                    onChange={this.handleChange.bind(this)} />\n                                <input type=\"password\"\n                                    className=\"form-control mt-2\"\n                                    id=\"password\"\n                                    placeholder=\"New Password\"\n                                    name=\"confirm_password\"\n                                    value={this.state.confirm_password}\n                                    onChange={this.handleChange.bind(this)} />\n\n                                <p className=\"text-right m-0 mt-2\">\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-primary\"\n                                        onClick={this.updatePasswordButton.bind(this)}\n                                    >Edit</button>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}